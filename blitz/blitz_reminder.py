import asyncio
from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from blitz.blitz_match.constans import START_BLITZ_PHOTO, REGISTER_BLITZ_PHOTO
from blitz.services.blitz_service import BlitzService
from blitz.services.message_sender.blitz_sender import send_message_all_users
from bot.callbacks.blitz_callback import BlitzRegisterCallback
from database.models.blitz import Blitz
from database.models.user_bot import UserBot
from logging_config import logger
from services.user_service import UserService


class BlitzTextGetter:

    def __init__(self, start_time: str, count_users: int):
        self.start_time = start_time
        self.count_users = count_users
        self.count_team = count_users // 2

    def start_tournament(self):
        return f"""
üöÄ <b>–ë–õ–Ü–¶-–¢–£–†–ù–Ü–† –†–û–ó–ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø!</b> üöÄ

üì£ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞ –Ω–∞–π—à–≤–∏–¥—à–∏–π —ñ –Ω–∞–π–∑–∞–ø–µ–∫–ª—ñ—à–∏–π —Ç—É—Ä–Ω—ñ—Ä –¥–Ω—è! –°—å–æ–≥–æ–¥–Ω—ñ –æ {self.start_time} {self.count_users} —É—á–∞—Å–Ω–∏–∫–∏ ({self.count_team} –∫–æ–º–∞–Ω–¥ –ø–æ 2 –≥—Ä–∞–≤—Ü—ñ) –≤–∏–π—à–ª–∏ –Ω–∞ –ø–æ–ª–µ, —â–æ–± –≤–∏–±–æ—Ä–æ—Ç–∏ –∑–≤–∞–Ω–Ω—è —á–µ–º–ø—ñ–æ–Ω–∞ –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä—É.

‚öôÔ∏è –ú–µ—Ö–∞–Ω—ñ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞, –∞–ª–µ —è—Å–∫—Ä–∞–≤–∞:
‚Äì 5 —Ö–≤–∏–ª–∏–Ω 7 –≤–∏—Ä—ñ—à–∞–ª—å–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤  
‚Äì 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞—Ç–∞–∫—É  
‚Äì –î–æ–Ω–∞—Ç –µ–Ω–µ—Ä–≥—ñ—ó X5  

–ó–∞—Ä–∞–∑ —Ñ–æ—Ä–º—É—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –≤–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è —Å–≤–æ—ó—Ö –Ω–∞–ø–∞—Ä–Ω–∏–∫—ñ–≤.  

‚è≥ –ß–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É –ø–æ—á–Ω–µ—Ç—å—Å—è 1/8 —Ñ—ñ–Ω–∞–ª—É ‚Äì –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –¥–æ –±–ª–∏—Å–∫–∞–≤–∏—á–Ω–æ—ó –±–æ—Ä–æ—Ç—å–±–∏ –π —Ç–æ—á–Ω–∏—Ö —É–¥–∞—Ä—ñ–≤!  
–£–¥–∞—á—ñ –≤—Å—ñ–º —ñ –Ω–µ—Ö–∞–π —Å–∏–ª—å–Ω—ñ—à—ñ –∑–¥–æ–±—É–¥—É—Ç—å –ø–µ—Ä–µ–º–æ–≥—É! üí•
            """

    def msg_vip_user(self):
        return f'''
‚è∞ <b>–ë–õ–Ü–¶-–¢–£–†–ù–Ü–† –°–¢–ê–†–¢–£–Ñ –°–¨–û–ì–û–î–ù–Ü –û {self.start_time}!</b> ‚è∞

–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤—ñ–π —à–∞–Ω—Å ‚Äî –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å üí™¬ª</b> —ñ –ø–æ–∫–∞–∂—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥—Ä–∞–≤–µ—Ü—å ‚Äî –≤–∏ –ª—ñ–¥–µ—Ä, —Å—Ç—Ä–∞—Ç–µ–≥ —ñ –ª–µ–≥–µ–Ω–¥–∞ —Ç—É—Ä–Ω—ñ—Ä—É!üí• üèÜ
'''

    def msg_simple_user(self):
        return f'''
üîî –ë–õ–Ü–¶-–¢–£–†–ù–Ü–† –°–¨–û–ì–û–î–ù–Ü –û {self.start_time} üîî

‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å 20 —Ö–≤–∏–ª–∏–Ω –¥–æ —Å—Ç–∞—Ä—Ç—É.
üéØ –ù–∞—Ç–∏—Å–∫–∞–π <b>¬´–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å üí™¬ª</b> —Ç–∞ –≥–æ—Ç—É–π—Å—è –¥–æ –±–ª–∏—Å–∫–∞–≤–∏—á–Ω–∏—Ö –ø–æ—î–¥–∏–Ω–∫—ñ–≤! ‚öΩÔ∏è
–ó–∞–ø–∏—Å –≤—ñ–¥–∫—Ä–∏—Ç–∏–π!
'''


class BlitzReminder:
    def __init__(self,
                 blitz: Blitz,
                 registration_cost: int,
                 remind_for_simple_users: int = 20,
                 remind_for_vip_users: int = 30,
                 necessary_count_users: int = 32,
                 register_photo_path: str = REGISTER_BLITZ_PHOTO
                 ):
        self.blitz_start_at = blitz.start_at
        time_str = self.blitz_start_at.strftime("%H:%M")
        self.blitz_text_getter = BlitzTextGetter(time_str, necessary_count_users)
        self.blitz_id = blitz.id
        self.remind_for_simple_users = remind_for_simple_users
        self.remind_for_vip_users = remind_for_vip_users
        self.necessary_count_users = necessary_count_users
        self.registration_cost = registration_cost
        self.register_photo_path = register_photo_path

    async def __reminder_blitz_for_users(self, users: list[UserBot], required_vip: bool, blitz_id: int):
        filtered_users = [
            user for user in users
            if user.vip_pass_is_active == required_vip
        ]
        if not filtered_users:
            return
        text = self.blitz_text_getter.msg_vip_user() if required_vip else self.blitz_text_getter.msg_simple_user()
        callback_data = BlitzRegisterCallback(blitz_id=blitz_id, max_characters=self.necessary_count_users,
                                              registration_cost=self.registration_cost).pack()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å üí™", callback_data=callback_data)]
        ])
        await send_message_all_users(filtered_users, text, reply_markup=markup, photo_path=self.register_photo_path)

    async def remind(self) -> bool:
        now = datetime.now()
        today_start = self.blitz_start_at
        vip_remind_time = today_start - timedelta(minutes=self.remind_for_vip_users)
        simple_remind_time = today_start - timedelta(minutes=self.remind_for_simple_users)
        users = await UserService.get_all_users_where_end_register()
        if self.remind_for_vip_users > 0:
            if now < vip_remind_time:
                await asyncio.sleep((vip_remind_time - now).total_seconds())
                await self.__reminder_blitz_for_users(users, True, self.blitz_id)
            elif now < today_start:
                await self.__reminder_blitz_for_users(users, True, self.blitz_id)

        now = datetime.now()
        if self.remind_for_simple_users > 0:
            if now < simple_remind_time:
                await asyncio.sleep((simple_remind_time - now).total_seconds())
                await self.__reminder_blitz_for_users(users, False, self.blitz_id)
            elif now < today_start:
                await self.__reminder_blitz_for_users(users, False, self.blitz_id)

        now = datetime.now()
        if now < today_start:
            await asyncio.sleep((today_start - now).total_seconds())
        users: list[UserBot] = await BlitzService.get_users_from_blitz_users(self.blitz_id)
        logger.info(f"Users len: {len(users)}")
        logger.info(f"Need len: {self.necessary_count_users}")
        logger.info(f"Blitz id: {self.blitz_id}")
        if len(users) >= self.necessary_count_users:
            users = users[:self.necessary_count_users]
            logger.info(f"Users len 1: {len(users)}")
            await send_message_all_users(users, self.blitz_text_getter.start_tournament(), photo_path=START_BLITZ_PHOTO)
        else:
            cancel_blitz_text = f'''
<b>–ù–∞ –∂–∞–ª—å, –Ω–∞ —Ü–µ–π –±–ª—ñ—Ü-—Ç—É—Ä–Ω—ñ—Ä –Ω–µ –∑'—è–≤–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ!</b>

{len(users)} / {self.necessary_count_users}

‚ùå –ì—Ä–∞ –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è.

üîú <b>–ù–µ –∑–∞—Å–º—É—á—É–π—Å—è!</b> –¢—Ä–µ–Ω—É–π—Å—è —Ç–∞ –≥–æ—Ç—É–π—Å—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –±–∏—Ç–≤. –¢–≤–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏ —â–µ –ø–æ–ø–µ—Ä–µ–¥—É!

‚öΩÔ∏è –ó–∞–ª–∏—à–∞–π—Å—è –∑ –Ω–∞–º–∏, –Ω–æ–≤–∏–π –±–ª—ñ—Ü-—Ç—É—Ä–Ω—ñ—Ä –≤–∂–µ —Å–∫–æ—Ä–æ, –¥–∏–≤–∏—Å—å –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É!
            '''
            await send_message_all_users(users, cancel_blitz_text)
            return False
        return True
