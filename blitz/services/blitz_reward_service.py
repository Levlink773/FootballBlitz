from abc import ABC, abstractmethod

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from blitz.blitz_match.constans import SMALL_BOX_BLITZ_PHOTO, MEDIUM_BOX_BLITZ_PHOTO, LARGE_BOX_BLITZ_PHOTO
from blitz.services.blitz_character_service import BlitzUserService
from blitz.services.message_sender.blitz_sender import send_message
from bot.callbacks.blitz_callback import BoxRewardCallback
from database.models.blitz_team import BlitzTeam
from database.models.user_bot import UserBot
from loader import bot
from services.character_service import CharacterService
from services.user_service import UserService
from utils.blitz_photo_utils import get_photo, save_photo_id

BONUS_ENERGY = 50


class RewardBlitzTeam(ABC):

    async def get_blitz_users(self, reward_blitz_team: BlitzTeam) -> list[UserBot]:
        extract_us = BlitzUserService.get_user_from_blitz_user
        return [(await extract_us(blitz_user)) for blitz_user in reward_blitz_team.users]

    async def reward_blitz(self, reward_blitz_team: BlitzTeam):
        users = await self.get_blitz_users(reward_blitz_team)
        for user in users:
            await self.reward_blitz_user(user)

    @abstractmethod
    async def reward_blitz_user(self, user: UserBot):
        raise NotImplementedError


class RewardMediumBoxBlitzTeam(RewardBlitzTeam):

    def box_type(self):
        return "—Å–µ—Ä–µ–¥–Ω—ñ–π", "medium", MEDIUM_BOX_BLITZ_PHOTO

    async def reward_blitz_user(self, user: UserBot):
        name_box, callback_name_box, photo_path = self.box_type()
        callback_data = BoxRewardCallback(box_type=callback_name_box).pack()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ üóùÔ∏è", callback_data=callback_data)]
        ])

        # –ù–æ–≤–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π, –¥—Ä–∞–π–≤–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑ HTML-–ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é
        is_save, photo = await get_photo(photo_path)
        msg = await bot.send_photo(
            user.user_id,
            photo=photo,
            caption=f"üéÅ <b>–£–≤–∞–≥–∞!</b> –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ <b>{name_box} –ª—É—Ç–±–æ–∫—Å</b> –∑–∞ –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä! "
                    "–í—ñ–¥–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤–æ—é –Ω–∞–≥–æ—Ä–æ–¥—É —Ç–∞ –∑–∞—Ä—è–¥–∏—Ç–∏—Å—è –º–æ—Ç–∏–≤–∞—Ü—ñ—î—é! üí•",
            reply_markup=markup,
            parse_mode="HTML"
        )
        # –î–æ–¥–∞—î–º–æ +50 –µ–Ω–µ—Ä–≥—ñ—ó –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥–∏
        if msg and not is_save:
            await save_photo_id(
                patch_to_photo=photo_path,
                photo_id=msg.photo[0].file_id,
            )


class RewardSmallBoxBlitzTeam(RewardMediumBoxBlitzTeam):

    def box_type(self):
        return "–º–µ–ª–µ–Ω—å–∫–∏–π", "small", SMALL_BOX_BLITZ_PHOTO


class RewardLargeBoxBlitzTeam(RewardMediumBoxBlitzTeam):

    def box_type(self):
        return "–≤–µ–ª–∏–∫–∏–π", "large", LARGE_BOX_BLITZ_PHOTO


class RewardEnergyBlitzTeam(RewardBlitzTeam):

    def __init__(self, reward_exp: int):
        self.reward_exp = reward_exp

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
        await UserService.add_energy_user(
            user_id=user.user_id,
            amount_energy_add=self.reward_exp,
        )
        # –ï–ø—ñ—á–Ω–∏–π —Ñ—ñ–Ω—ñ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –µ–Ω–µ—Ä–≥—ñ—é
        await send_message(
            user=user,
            text=f"‚ö° <b>+{self.reward_exp} –µ–Ω–µ—Ä–≥—ñ—ó</b> –∑–∞ —É—á–∞—Å—Ç—å —É –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä—ñ! –î—è–∫—É—î–º–æ, —â–æ –±—É–ª–∏ –∑ –Ω–∞–º–∏ ‚Äî "
                 "–ø–æ–ø–æ–≤–Ω—é–π—Ç–µ –∑–∞–ø–∞—Å–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –±–∞—Ç–ª—ñ–≤! üí™",
        )


class RewardMoneyBlitzTeam(RewardBlitzTeam):

    def __init__(self, reward_money: int):
        self.reward_money = reward_money

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
        await UserService.add_money_user(
            user_id=user.user_id,
            amount_money_add=self.reward_money,
        )
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–≥–æ—Ä–æ–¥—É
        await send_message(
            user=user,
            text=f"üí∞ <b>+{self.reward_money} –º–æ–Ω–µ—Ç</b> –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ç—É—Ä–Ω—ñ—Ä—ñ Football Bliz! "
                 "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ó—Ö –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤ —Ç–∞ –ø–æ—Å–∏–ª–µ–Ω–Ω—è —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏! ‚öΩ"
        )
class RewardRatingBlitzTeam(RewardBlitzTeam):

    def __init__(self, reward_rating: int):
        self.reward_rating = reward_rating

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await CharacterService.add_rating(
            user.main_character,
            self.reward_rating,
        )
        # –ï–ø—ñ—á–Ω–∏–π —Ñ—ñ–Ω—ñ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –µ–Ω–µ—Ä–≥—ñ—é
        await send_message(
            user=user,
            text=f"üìä <b>+{self.reward_rating} –æ—á–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É</b> –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ç—É—Ä–Ω—ñ—Ä—ñ Football Bliz! "
                 "–í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∂–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ —É –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—ñ–≤. "
                 "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –±–æ—Ä–æ—Ç–∏—Å—è –∑–∞ –≤–µ—Ä—à–∏–Ω—É —Ç—É—Ä–Ω—ñ—Ä–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ! üèÜ"
        )
class RewardStatisticsBlitzTeam(RewardBlitzTeam):

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await UserService.add_count_play_blitz_user(
            user.user_id,
            1,
        )
class RewardStatisticsSemiFinalBlitzTeam(RewardBlitzTeam):

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await UserService.add_count_rich_semi_final_blitz_user(
            user.user_id,
            1,
        )
class RewardStatisticFinalLooserFinalBlitzTeam(RewardBlitzTeam):

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await UserService.add_count_rich_final_looser_blitz_user(
            user.user_id,
            1,
        )
class RewardStatisticFinalWinnerFinalBlitzTeam(RewardBlitzTeam):

    async def reward_blitz_user(self, user: UserBot):
        # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await UserService.add_count_rich_final_winner_blitz_user(
            user.user_id,
            1,
        )
class BlitzRewardService:
    @staticmethod
    async def reward_blitz_team(reward_blitz_team_executors: list[RewardBlitzTeam], reward_blitz_team: BlitzTeam):
        for reward_blitz_team_exe in reward_blitz_team_executors:
            await reward_blitz_team_exe.reward_blitz(reward_blitz_team)
