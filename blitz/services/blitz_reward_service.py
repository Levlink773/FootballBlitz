from abc import ABC, abstractmethod

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from blitz.blitz_match.constans import SMALL_BOX_BLITZ_PHOTO, MEDIUM_BOX_BLITZ_PHOTO
from blitz.services.blitz_character_service import BlitzCharacterService
from blitz.services.message_sender.blitz_sender import send_message
from bot.callbacks.blitz_callback import BoxRewardCallback
from database.models.blitz_team import BlitzTeam
from database.models.character import Character
from loader import bot
from services.character_service import CharacterService
from utils.blitz_photo_utils import get_photo, save_photo_id

BONUS_ENERGY = 50


class RewardBlitzTeam(ABC):

    def __init__(self, reward_blitz_team: BlitzTeam):
        self.reward_blitz_team = reward_blitz_team

    async def get_blitz_characters(self) -> list[Character]:
        extract_ch = BlitzCharacterService.get_character_from_blitz_character
        return [(await extract_ch(blitz_character)) for blitz_character in self.reward_blitz_team.characters]

    async def reward_blitz(self):
        characters = await self.get_blitz_characters()
        for character in characters:
            await self.reward_blitz_character(character)

    @abstractmethod
    async def reward_blitz_character(self, character: Character):
        raise NotImplementedError


class RewardWinnerBlitzTeam(RewardBlitzTeam):

    def __init__(self, reward_blitz_team: BlitzTeam, reward_exp: int):
        super().__init__(reward_blitz_team)
        self.reward_exp = reward_exp

    def box_type(self):
        return "—Å–µ—Ä–µ–¥–Ω—ñ–π", "medium", MEDIUM_BOX_BLITZ_PHOTO

    async def reward_blitz_character(self, character: Character):
        name_box, callback_name_box, photo_path = self.box_type()
        callback_data = BoxRewardCallback(box_type=callback_name_box).pack()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ üóùÔ∏è", callback_data=callback_data)]
        ])

        # –ù–æ–≤–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π, –¥—Ä–∞–π–≤–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑ HTML-–ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é
        is_save, photo = await get_photo(photo_path)
        msg = await bot.send_photo(
            character.characters_user_id,
            photo=photo,
            caption=f"üéÅ <b>–£–≤–∞–≥–∞!</b> –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ <b>{name_box} –ª—É—Ç–±–æ–∫—Å</b> –∑–∞ –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä! "
            "–í—ñ–¥–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤–æ—é –Ω–∞–≥–æ—Ä–æ–¥—É —Ç–∞ –∑–∞—Ä—è–¥–∏—Ç–∏—Å—è –º–æ—Ç–∏–≤–∞—Ü—ñ—î—é! üí•",
            reply_markup=markup,
            parse_mode="HTML"
        )
        # –î–æ–¥–∞—î–º–æ +50 –µ–Ω–µ—Ä–≥—ñ—ó –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥–∏
        await RewardSimpleBlitzTeam(self.reward_blitz_team, self.reward_exp).reward_blitz_character(character)
        if msg and not is_save:
            await save_photo_id(
                patch_to_photo=photo_path,
                photo_id=msg.photo[0].file_id,
            )




class RewardPreWinnerBlitzTeam(RewardWinnerBlitzTeam):

    def box_type(self):
        return "–º–µ–ª–µ–Ω—å–∫–∏–π", "small", SMALL_BOX_BLITZ_PHOTO


class RewardSimpleBlitzTeam(RewardBlitzTeam):

    def __init__(self, reward_blitz_team: BlitzTeam, reward_exp: int):
        super().__init__(reward_blitz_team)
        self.reward_exp = reward_exp

    async def reward_blitz_character(self, character: Character):
        # –ó–±—ñ–ª—å—à—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
        await CharacterService.edit_character_energy(
            character_id=character.id,
            amount_energy=self.reward_exp,
        )
        # –ï–ø—ñ—á–Ω–∏–π —Ñ—ñ–Ω—ñ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –µ–Ω–µ—Ä–≥—ñ—é
        await send_message(
            character=character,
            text=f"‚ö° <b>+{self.reward_exp} –µ–Ω–µ—Ä–≥—ñ—ó</b> –∑–∞ —É—á–∞—Å—Ç—å —É –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä—ñ! –î—è–∫—É—î–º–æ, —â–æ –±—É–ª–∏ –∑ –Ω–∞–º–∏ ‚Äî "
            "–ø–æ–ø–æ–≤–Ω—é–π—Ç–µ –∑–∞–ø–∞—Å–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –±–∞—Ç–ª—ñ–≤! üí™",
        )


class BlitzRewardService:
    @staticmethod
    async def reward_blitz_team(reward_blitz_team: RewardBlitzTeam):
        await reward_blitz_team.reward_blitz()
