import asyncio

from blitz.blitz_match.constans import END_BLITZ_PHOTO, BLITZ_STAGES_PATCH
from blitz.services.blitz_team_service import BlitzTeamService
from blitz.services.message_sender.blitz_sender import send_message_all_users
from database.models.blitz_team import BlitzTeam
from database.models.user_bot import UserBot


class BlitzAnnounceService:
    PARSE_MODE = 'HTML'

    @classmethod
    async def announce_matchups(cls, pairs: list[tuple[BlitzTeam, BlitzTeam]]):
        if not pairs:
            raise ValueError("–ù–∞ –∂–∞–ª—å, –ø–∞—Ä –¥–ª—è –º–∞—Ç—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        stage_map = {
            16: ("1/16 —Ñ—ñ–Ω–∞–ª—É", BLITZ_STAGES_PATCH[0]),
            8: ("1/8 —Ñ—ñ–Ω–∞–ª—É", BLITZ_STAGES_PATCH[0]),
            4: ("1/4 —Ñ—ñ–Ω–∞–ª—É", BLITZ_STAGES_PATCH[1]),
            2: ("1/2 —Ñ—ñ–Ω–∞–ª—É", BLITZ_STAGES_PATCH[2]),
            1: ("–§—ñ–Ω–∞–ª", BLITZ_STAGES_PATCH[3]),
        }
        stage = stage_map.get(len(pairs), ("–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥", BLITZ_STAGES_PATCH[0]))

        lines = [f"‚öΩÔ∏è <b>–ß–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –±–ª—ñ—Ü —Ä–∞—É–Ω–¥ ({stage[0]})!</b> ‚öΩÔ∏è", ""]
        for idx, (team_a, team_b) in enumerate(pairs, start=1):
            lines.append(f"üî∏ –ú–∞—Ç—á {idx}: <b>{team_a.name}</b> vs <b>{team_b.name}</b>")
        lines.append("")
        lines.append("–ù–µ—Ö–∞–π –ø–µ—Ä–µ–º–æ–∂–µ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π! üí•")

        text = "\n".join(lines)
        # üë• –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥
        involved_characters = []
        for team_a, team_b in pairs:
            users = await BlitzTeamService.get_user_from_blitz_team(team_a)
            users1 = await BlitzTeamService.get_user_from_blitz_team(team_b)
            involved_characters.extend(users + users1)

        # üßπ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        unique_user = {user.user_id: user for user in involved_characters}.values()
        await send_message_all_users(list(unique_user), text, photo_path=stage[1])

    @classmethod
    async def announce_end(cls, users: list[UserBot], final_winner: BlitzTeam, final_looser: BlitzTeam) -> None:
        res_winner, res_looser = await asyncio.gather(
            BlitzTeamService.get_user_from_blitz_team(final_winner),
            BlitzTeamService.get_user_from_blitz_team(final_looser)
        )
        ch_win_first = res_winner[0].main_character.name or res_winner[0].user_name
        ch_loose_first = res_looser[0].main_character.name or res_looser[0].user_name
        end_text = f"""
üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä—É!</b>

ü•á –ö–æ–º–∞–Ω–¥–∞ <b>¬´{final_winner.name}¬ª</b> –∑–¥–æ–±—É–≤–∞—î 1 –º—ñ—Å—Ü–µ —Ç–∞ –æ—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–Ω—ñ–π –ª—É—Ç–±–æ–∫—Å! –í—ñ—Ç–∞—î–º–æ {ch_win_first} ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—ñ —á–µ–º–ø—ñ–æ–Ω–∏! üéâ

ü•à –ö–æ–º–∞–Ω–¥–∞ <b>¬´{final_looser.name}¬ª</b> –ø–æ—Å—ñ–¥–∞—î 2 –º—ñ—Å—Ü–µ —Ç–∞ –æ—Ç—Ä–∏–º—É—î –º–∞–ª–µ–Ω—å–∫–∏–π –ª—É—Ç–±–æ–∫—Å ‚Äî —á—É–¥–æ–≤–∞ –≥—Ä–∞ –≤—ñ–¥ {ch_loose_first}! üëè

‚ö° –£—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å +50 –µ–Ω–µ—Ä–≥—ñ—ó! –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É ‚Äî –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª–∏—Ü-—Ç—É—Ä–Ω—ñ—Ä—É! üí™
"""
        await send_message_all_users(users, end_text, photo_path=END_BLITZ_PHOTO)

    @classmethod
    async def announce_round_results(cls, winners: list[BlitzTeam], losers: list[BlitzTeam]):
        if not winners and not losers:
            raise ValueError("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞—É–Ω–¥—É.")

        next_stage_map = {
            16: "1/8 —Ñ—ñ–Ω–∞–ª—É",
            8: "1/4 —Ñ—ñ–Ω–∞–ª—É",
            4: "1/2 —Ñ—ñ–Ω–∞–ª—É",
            2: "–§–Ü–ù–ê–õ üèÜ",
            1: "–ú–∞—Ç—á –∑–∞ 3-—î –º—ñ—Å—Ü–µ"
        }
        next_stage = next_stage_map.get(len(winners), "–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥")

        lines = [f"üîî <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞—É–Ω–¥—É!</b> üîî", ""]
        if losers:
            lines.append("üö´ <b>–í–∏–±—É–ª–∏:</b>")
            for team in losers:
                lines.append(f"- {team.name}")
            lines.append("")
        if winners:
            lines.append("‚úÖ <b>–ü—Ä–æ–π—à–ª–∏ –¥–∞–ª—ñ:</b>")
            for team in winners:
                lines.append(f"- {team.name}")
            lines.append("")
        lines.append(f"üî• <b>–ù–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø: {next_stage}</b> üî•")

        text = "\n".join(lines)
        involved_characters = []
        for team in winners + losers:
            users = await BlitzTeamService.get_user_from_blitz_team(team)
            involved_characters.extend(users)
        await send_message_all_users(involved_characters, text)

        # –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ
        for w in winners:
            await cls.notify_team_advancement(w, next_stage)
        for l in losers:
            await cls.notify_team_elimination(l)

    @classmethod
    async def notify_team_advancement(cls,
                                      team: BlitzTeam,
                                      next_stage: str):
        users = await BlitzTeamService.get_user_from_blitz_team(team)
        prep_text = '—Ä–∞—É–Ω–¥—É, —è–∫–∏–π –≤–∏—Ä—ñ—à–∏—Ç—å –¥–æ–ª—é –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ —É —Ü—å–æ–º—É –ë–ª—ñ—Ü —Ç—É—Ä–Ω—ñ—Ä—ñ üî•' if next_stage == '–§–Ü–ù–ê–õ üèÜ' else '–Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞—É–Ω–¥—É'
        text = (
            f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.name}</b> –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É <b>{next_stage}</b>! üéâ\n"
            f"–£ –≤–∞—Å —î 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ {prep_text}. ‚è±Ô∏è"
        )
        await send_message_all_users(users, text)

    @classmethod
    async def notify_team_elimination(cls,
                                      team: BlitzTeam):
        users = await BlitzTeamService.get_user_from_blitz_team(team)
        text = (
            f"‚ö†Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{team.name}</b> –Ω–µ –ø—Ä–æ–π—à–ª–∞ –¥–∞–ª—ñ —Ü—å–æ–≥–æ —Ä–∞—É–Ω–¥—É. ‚ö†Ô∏è\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ —Ç—É—Ä–Ω—ñ—Ä—É –≤–∞–º –±—É–¥–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ +50 –µ–Ω–µ—Ä–≥—ñ—ó."
        )
        await send_message_all_users(users, text)
