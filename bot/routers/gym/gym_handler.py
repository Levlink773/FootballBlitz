from datetime import datetime
from datetime import timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from bot.callbacks.gym_calbacks import SelectTimeGym
from bot.keyboards.gym_keyboard import select_time_to_gym, no_energy_keyboard
from constants import const_energy_by_time
from database.models.character import Character
from database.models.user_bot import (
    UserBot
)
from gym_character.core.gym import Gym
from gym_character.core.manager import GymCharacterManager
from services.reminder_character_service import RemniderCharacterService
from services.user_service import UserService

gym_router = Router()


@gym_router.message(
    F.text.regexp(r"(‚úÖ\s*)?üñ≤ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è(\s*‚úÖ)?")
)
async def go_to_gym(
        message: Message,
):
    await message.answer(
        text="""
    <b>30 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>35%</b>  
    –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>10</b> –µ–Ω–µ—Ä–≥—ñ—ó 

    <b>60</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>45%</b>  
    –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>20</b> –µ–Ω–µ—Ä–≥—ñ—ó

    <b>90</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>55%</b>  
    –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>40</b> –µ–Ω–µ—Ä–≥—ñ—ó

    <b>120</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>75%</b> 
    –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>60</b> –µ–Ω–µ—Ä–≥—ñ—ó""",
        reply_markup=select_time_to_gym()
    )


@gym_router.callback_query(
    SelectTimeGym.filter(),
)
async def start_gym(
        query: CallbackQuery,
        callback_data: SelectTimeGym,
        user: UserBot,
        character: Character,
):
    _time_training = callback_data.gym_time
    if not character:
        return await query.message.reply("<b>–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∂–∞</b>")
    if character.reminder.character_in_training:
        return await query.message.reply("<b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —ñ —Ç–∞–∫ —É–∂–µ —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è</b>")
    cost_gym = const_energy_by_time[callback_data.gym_time]
    if user.energy < cost_gym:
        try:
            return await query.message.answer(
                text="–£ –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó, –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é –≤ –ö—Ä–∞–º–Ω–∏—Ü—ñ –µ–Ω–µ—Ä–≥—ñ—ó",
                reply_markup=no_energy_keyboard()
            )
        except:
            return

    reduction_time = _time_training.total_seconds()
    end_time_training = datetime.now() + timedelta(seconds=reduction_time)

    caption = """
üöÄ <b>–ü–æ—á–∏–Ω–∞—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b>

üëü –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - {end_time} —Ö–≤

‚è∞ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≤ <b>{end_time_full}</b>
""".format(
        end_time=int(_time_training.total_seconds() / 60),
        end_time_full=end_time_training.strftime("%Y-%m-%d %H:%M")
    )
    await query.message.edit_caption(caption=caption, reply_markup=None)
    gym_scheduler = Gym(
        character=character,
        time_training=callback_data.gym_time,
    )
    task_training = gym_scheduler.start_training()
    GymCharacterManager.add_gym_task(
        character_id=character.id,
        task=task_training
    )
    await RemniderCharacterService.update_training_info(
        character_id=character.id,
        time_start_training=datetime.now(),
        time_training_seconds=int(callback_data.gym_time.total_seconds())
    )
    await RemniderCharacterService.toggle_character_training_status(character_id=character.id)
    await UserService.consume_energy(user_id=user.user_id, amount_energy_consume=cost_gym)


@gym_router.callback_query(F.data == "get_out_of_gym")
async def leave_from_gym(query: CallbackQuery, character: Character):
    await GymCharacterManager.remove_gym_task(character.id)
    await query.message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
