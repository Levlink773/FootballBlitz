from datetime import datetime
from datetime import timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from bot.callbacks.gym_calbacks import SelectTimeGym
from bot.keyboards.gym_keyboard import select_time_to_gym
from constants import const_energy_by_time, GYM_PHOTO
from database.models.character import Character
from database.models.user_bot import (
    UserBot
)
from gym_character.core.gym import Gym
from gym_character.core.manager import GymCharacterManager
from logging_config import logger
from services.reminder_character_service import RemniderCharacterService
from services.user_service import UserService

gym_router = Router()


@gym_router.message(
    F.text.regexp(r"(‚úÖ\s*)?üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è(\s*‚úÖ)?")
)
async def go_to_gym(
        message: Message,
):
    await message.answer_photo(
        photo=GYM_PHOTO,
        caption="""
<b>30 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>35%</b>
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>10‚ö° –µ–Ω–µ—Ä–≥—ñ—ó</b>
    
<b>60 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>45%</b>
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>20‚ö° –µ–Ω–µ—Ä–≥—ñ—ó</b>
    
<b>90 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>55%</b>
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>40‚ö° –µ–Ω–µ—Ä–≥—ñ—ó</b>
    
<b>120 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>75%</b>
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>60‚ö° –µ–Ω–µ—Ä–≥—ñ—ó</b>
""",
        reply_markup=select_time_to_gym()
    )


@gym_router.callback_query(
    SelectTimeGym.filter(),
)
async def start_gym(
        query: CallbackQuery,
        callback_data: SelectTimeGym,
        user: UserBot,
        character: Character,
):
    _time_training = callback_data.gym_time
    if not character or not user.main_character:
        return await query.message.reply(
            "<b>‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç–∞!</b>\n"
            "üèü –°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±–æ –ø—Ä–∏–¥–±–∞–π—Ç–µ –≥—Ä–∞–≤—Ü—è, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."
        )

    if character.reminder.character_in_training:
        return await query.message.reply(
            "<b>üí™ –í–∞—à —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!</b>\n"
            "‚è≥ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–µ."
        )

    cost_gym = const_energy_by_time[callback_data.gym_time]
    if user.energy < cost_gym:
        try:
            return await query.message.answer(
                text=(
                    "<b>‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –µ–Ω–µ—Ä–≥—ñ—ó!</b>\n"
                    f"–í–∞—Ä—Ç—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: <b>{cost_gym} –µ–Ω–µ—Ä–≥—ñ—ó</b>\n"
                    f"–£ –≤–∞—Å –∑–∞—Ä–∞–∑: <b>{user.energy} –µ–Ω–µ—Ä–≥—ñ—ó</b>\n\n"
                    "üí° –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é:\n"
                    "‚Ä¢ –í–∏–∫–æ–Ω—É—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ üß† –£—á–±–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ\n"
                    "‚Ä¢ –ë–µ—Ä—É—á–∏ —É—á–∞—Å—Ç—å —É üèÜ —Ç—É—Ä–Ω—ñ—Ä–∞—Ö\n"
                )
            )
        except:
            return
    user = await UserService.consume_energy(user_id=user.user_id, amount_energy_consume=cost_gym)
    logger.info(f"user energy: {user.energy}")

    reduction_time = _time_training.total_seconds()
    end_time_training = datetime.now() + timedelta(seconds=reduction_time)

    caption = """
üöÄ <b>–ü–æ—á–∏–Ω–∞—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b>

üëü –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - {end_time} —Ö–≤

‚è∞ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≤ <b>{end_time_full}</b>
""".format(
        end_time=int(_time_training.total_seconds() / 60),
        end_time_full=end_time_training.strftime("%Y-%m-%d %H:%M")
    )
    await query.message.edit_caption(caption=caption, reply_markup=None)
    gym_scheduler = Gym(
        character=user.main_character,
        time_training=callback_data.gym_time,
    )
    task_training = gym_scheduler.start_training()
    GymCharacterManager.add_gym_task(
        character_id=user.main_character.id,
        task=task_training
    )
    await RemniderCharacterService.update_training_info(
        character_id=user.main_character.id,
        time_start_training=datetime.now(),
        time_training_seconds=int(callback_data.gym_time.total_seconds())
    )
    await RemniderCharacterService.toggle_character_training_status(character_id=character.id)
    await query.message.answer(f'''
üí™ –í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ <b>{cost_gym} –µ–Ω–µ—Ä–≥—ñ—ó</b> –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!
–ß–∞—Å –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ–≥–æ —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç–∞ —Ç–∞ –ø—ñ–¥–Ω—è—Ç–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å! ‚öΩüî•
    ''')


@gym_router.callback_query(F.data == "get_out_of_gym")
async def leave_from_gym(query: CallbackQuery, character: Character):
    await GymCharacterManager.remove_gym_task(character.id)
    await query.message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
