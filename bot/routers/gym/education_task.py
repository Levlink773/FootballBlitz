from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, FSInputFile
from typing import Tuple

from aiogram.utils.keyboard import InlineKeyboardBuilder

from constants import EDUCATION_TASK
from database.models.character import Character
from database.models.user_bot import UserBot
from services.user_service import UserService
from stats.stat import stat, stat_done_already, BaseStatistics

education_task_router = Router()

def _build_tasks_message_and_kb(user: UserBot) -> Tuple[str, InlineKeyboardMarkup]:
    kb = InlineKeyboardBuilder()
    btns = []

    not_done_lines = []
    done_with_reward_lines = []
    done_without_reward_lines = []

    for st_type, stat_cls in stat.items():
        stat_instance: BaseStatistics = stat_cls(user)
        done, progress = stat_instance.statistics_result()
        user_completed_types = {s.stat_type for s in user.statistics}
        already_recorded = st_type in user_completed_types

        if not done:
            not_done_lines.append(
                f"üî∏ <b>{stat_instance.description()}</b>\n{stat_instance.describe()}\n"
            )
        else:
            if already_recorded:
                text = stat_done_already.get(st_type, f"–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ {stat_instance.description()}.")
                done_with_reward_lines.append(
                    f"‚úÖ <b>{stat_instance.description()}</b>\n{text}\n"
                )
            else:
                success_text = stat_instance.describe_statistics_success()
                done_without_reward_lines.append(
                    f"üéâ <b>{stat_instance.description()}</b>\n{success_text}\n"
                )
                btns.append(InlineKeyboardButton(
                    text=stat_instance.text_get_button(),
                    callback_data=f"claim_stat:{st_type.value}"
                ))
    lines = []
    if not_done_lines:
        lines.append("‚è≥ <b>–ó–∞–≤–¥–∞–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ</b>\n" + "\n".join(not_done_lines))
    if done_with_reward_lines:
        lines.append("‚úÖ <b>–í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n" + "\n".join(done_with_reward_lines))
    if done_without_reward_lines:
        lines.append("üéÅ <b>–ì–æ—Ç–æ–≤—ñ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏</b>\n" + "\n".join(done_without_reward_lines))
    if btns:
        kb.row(*btns, width=1)
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="get_education_center")

    header = "<b>–ó–∞–≤–¥–∞–Ω–Ω—è –≤ –æ—Å–≤—ñ—Ç–Ω—å–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ</b>\n\n"
    footer = "\n\n<b>–ü–æ—Ä–∞–¥–∞:</b> –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û—Ç—Ä–∏–º–∞—Ç–∏¬ª, —è–∫—â–æ –≤–∏–∫–æ–Ω–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è."
    body = "\n\n".join(lines) if lines else "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å."

    return header + body + footer, kb.as_markup()



@education_task_router.callback_query(F.data == "get_tasks_education_center")
async def get_tasks_education_cernter(query: CallbackQuery, user: UserBot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∏—Ö —Å—Ç–∞—Ç—É—Å—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """
    await query.answer()  # —Å–∫—Ä—ã–≤–∞–µ–º '–∫—Ä—É—Ç–∏–ª–∫—É' —É –∫–ª–∏–µ–Ω—Ç–∞
    text, kb = _build_tasks_message_and_kb(user)
    try:
        await query.message.edit_media(
            media=InputMediaPhoto(media=EDUCATION_TASK, caption=text),
            reply_markup=kb
        )
    except Exception:
        await query.message.answer_photo(photo=EDUCATION_TASK, caption=text, reply_markup=kb)


@education_task_router.callback_query(F.data.startswith("claim_stat:"))
async def claim_stat_callback(query: CallbackQuery, user: UserBot, character: Character):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç—Ä–∏–º–∞—Ç–∏" ‚Äî –≤—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É –∏ –ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    callback_data expected: "claim_stat:<STAT_VALUE>"
    """
    await query.answer()

    payload = query.data.split("claim_stat:", 1)
    if len(payload) < 2 or not payload[1]:
        await query.message.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏.")
        return

    stat_value = payload[1]
    target_type = None
    for st_type in stat.keys():
        if st_type.value == stat_value:
            target_type = st_type
            break

    if target_type is None:
        await query.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.")
        return

    stats_cls = stat[target_type]
    stats_instance = stats_cls(user)

    done, progress = stats_instance.statistics_result()
    user_completed_types = {s.stat_type for s in user.statistics}
    already_recorded = target_type in user_completed_types

    if not done:
        await query.message.answer("–í–∏ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏ —Ü—é –∑–∞–¥–∞—á—É.")
        return

    if already_recorded:
        await query.message.answer("–ù–∞–≥–æ—Ä–æ–¥–∞ –≤–∂–µ –±—É–ª–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
        return
    try:
        await stats_instance.reward_stat()
    except Exception as e:
        await query.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏: {e}")
        return

    user = await UserService.get_user(user_id=user.user_id)

    text, kb = _build_tasks_message_and_kb(user)
    try:
        await query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await query.message.answer("–ù–∞–≥–æ—Ä–æ–¥—É –≤–∏–¥–∞–Ω–æ!")
    await query.message.answer("–ù–∞–≥–æ—Ä–æ–¥–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ üéâ")
