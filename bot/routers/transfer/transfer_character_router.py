from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputMediaPhoto, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import selectinload

from constants import SUCCESS_BUY_PLAYER, SUCCESS_EXHIBITED_TRANSFER, TRANSFER, get_photo_character, MY_TRANSFERS
from database.models.character import Character
from database.models.transfer_character import TransferType, TransferCharacter
from database.models.user_bot import UserBot
from database.session import get_session
from services.character_service import CharacterService
from services.transfer_service import TransferCharacterService
from services.user_service import UserService

transfer_transfer_router = Router()
sort_titles = {
    "price_asc": "—Ü—ñ–Ω–∞ (–≤—ñ–¥ –¥–µ—à–µ–≤–∏—Ö –¥–æ –¥–æ—Ä–æ–≥–∏—Ö)",
    "price_desc": "—Ü—ñ–Ω–∞ (–≤—ñ–¥ –¥–æ—Ä–æ–≥–∏—Ö –¥–æ –¥–µ—à–µ–≤–∏—Ö)",
    "power_asc": "—Å–∏–ª–∞ (–≤—ñ–¥ —Å–ª–∞–±–∫–∏—Ö –¥–æ —Å–∏–ª—å–Ω–∏—Ö)",
    "power_desc": "—Å–∏–ª–∞ (–≤—ñ–¥ —Å–∏–ª—å–Ω–∏—Ö –¥–æ —Å–ª–∞–±–∫–∏—Ö)"
}

# === –•—ç–Ω–¥–ª–µ—Ä: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ ===
@transfer_transfer_router.message(F.text == "üèü –†–∏–Ω–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤")
async def show_transfer_market(message: types.Message, state: FSMContext):
    await state.update_data(sort="price_asc", page=1)
    await send_transfer_page(message, state)


async def send_transfer_page(message_or_callback, state: FSMContext):
    data = await state.get_data()
    sort = data.get("sort", "price_asc")
    page = data.get("page", 1)

    transfers = await TransferCharacterService.get_all()

    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text='‚öΩ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤', callback_data='exhibited_character')
    )

    if not transfers:
        msg = "‚ùå –ù–∞ —Ä–∏–Ω–∫—É –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤."
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer_photo(
                photo=TRANSFER,
                caption=msg,
                reply_markup=kb.as_markup()
            )
        else:
            await message_or_callback.message.edit_media(
                media=InputMediaPhoto(media=TRANSFER, caption=msg),
                reply_markup=kb.as_markup()
            )
        return

    # --- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
    if sort == "price_asc":
        transfers.sort(key=lambda t: t.price)
    elif sort == "price_desc":
        transfers.sort(key=lambda t: t.price, reverse=True)
    elif sort == "power_asc":
        transfers.sort(key=lambda t: t.character.power)
    elif sort == "power_desc":
        transfers.sort(key=lambda t: t.character.power, reverse=True)

    per_page = 5
    start = (page - 1) * per_page
    end = start + per_page
    page_items = transfers[start:end]

    # --- —Ç–µ–∫—Å—Ç ---
    text = f"üìä <b>–†–∏–Ω–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤</b>  (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page})\n"
    text += f"üîé <i>–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:</i> {sort_titles.get(sort, sort)}\n\n"
    text += "üë§ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º‚Äô—è, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ:\n\n"

    # --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
    for transfer in page_items:
        char = transfer.character
        kb.row(
            InlineKeyboardButton(
                text=f"{char.name} | {transfer.price} üí∞",
                callback_data=f"info:{transfer.id}"
            )
        )

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (2 –∫–Ω–æ–ø–∫–∏)
    price_text = "üí∞ –¶—ñ–Ω–∞ ‚¨Ü" if sort != "price_desc" else "üí∞ –¶—ñ–Ω–∞ ‚¨á"
    power_text = "üí™ –°–∏–ª–∞ ‚¨Ü" if sort != "power_desc" else "üí™ –°–∏–ª–∞ ‚¨á"
    kb.row(
        InlineKeyboardButton(text=price_text, callback_data="sort:price"),
        InlineKeyboardButton(text=power_text, callback_data="sort:power"),
    )

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_row = []
    if page > 1:
        nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page:{page - 1}"))
    if end < len(transfers):
        nav_row.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page:{page + 1}"))
    if nav_row:
        kb.row(*nav_row)

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer_photo(
            photo=TRANSFER,
            caption=text,
            reply_markup=kb.as_markup(),
        )
    else:
        await message_or_callback.message.edit_media(
            media=InputMediaPhoto(media=TRANSFER, caption=text),
            reply_markup=kb.as_markup()
        )



# === –•–µ–Ω–¥–ª–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.callback_query(F.data.startswith("info:"))
async def show_player_info(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)
    if not transfer:
        await callback.answer("‚ùå –ì—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    char = transfer.character
    seller_user = await UserService.get_user(char.characters_user_id)
    seller = "–ù–µ –Ω–∞–π–¥–µ–Ω"
    if seller_user:
        seller = f'@{seller_user.user_name}' or seller_user.user_full_name or seller_user.user_id
    text = (
        f"üèü <b>{char.name}</b>\n"
        f"üìÖ –í—ñ–∫: {char.age}\n"
        f"üí™ –°–∏–ª–∞: {char.power}\n"
        f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
        f"üí∞ –¶—ñ–Ω–∞: {transfer.price}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(
        text=f"üí∞ –ö—É–ø–∏—Ç–∏ –∑–∞ {transfer.price}",
        callback_data=f"buy:{transfer.id}"
    )
    kb.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")

    await callback.message.edit_media(
        media=InputMediaPhoto(media=get_photo_character(char), caption=text),
        reply_markup=kb.as_markup()
    )


# === –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ===
@transfer_transfer_router.callback_query(F.data == "back_to_list")
async def back_to_list(callback: types.CallbackQuery, state: FSMContext):
    await send_transfer_page(callback, state)
    await callback.answer()


@transfer_transfer_router.callback_query(F.data.startswith("sort:"))
async def change_sort(callback: types.CallbackQuery, state: FSMContext):
    sort_type = callback.data.split(":")[1]
    data = await state.get_data()
    current_sort = data.get("sort", "price_asc")

    if sort_type == "price":
        new_sort = "price_desc" if current_sort == "price_asc" else "price_asc"
    elif sort_type == "power":
        new_sort = "power_desc" if current_sort == "power_asc" else "power_asc"
    else:
        new_sort = "price_asc"

    await state.update_data(sort=new_sort)
    await send_transfer_page(callback, state)


# === –•—ç–Ω–¥–ª–µ—Ä: —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
@transfer_transfer_router.callback_query(F.data.startswith("page:"))
async def change_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await state.update_data(page=page)
    await send_transfer_page(callback, state)
    await callback.answer()


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.callback_query(F.data.startswith("buy:"))
async def buy_player(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)

    if not transfer:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π –∞–±–æ –∑–Ω—è—Ç–∏–π –∑ —Ä–∏–Ω–∫—É.", show_alert=True)
        return

    char = transfer.character

    buyer_id = callback.from_user.id
    seller_id = char.characters_user_id

    # –∑–∞–ø—Ä–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if buyer_id == seller_id:
        await callback.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Å–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è.", show_alert=True)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    async for session in get_session():
        char: Character = await session.scalar(
            select(Character).where(Character.id == char.id).options(selectinload(Character.transfer))
        )
        transfer: TransferCharacter = await session.scalar(
            select(TransferCharacter).where(TransferCharacter.id == transfer.id)
        )
        buyer: UserBot = await session.scalar(
            select(UserBot).where(UserBot.user_id == buyer_id).options(
                selectinload(UserBot.characters),
                selectinload(UserBot.main_character),
            )
        )
        seller: UserBot = await session.scalar(select(UserBot).where(UserBot.user_id == seller_id))
        if buyer.money < transfer.price:
            await callback.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.", show_alert=True)
            return
        if (not buyer.vip_pass_is_active and len(buyer.characters) >= 1) or (
                buyer.vip_pass_is_active and len(buyer.characters) >= 2):
            t = '‚ö†Ô∏è –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤. üßç‚Äç‚ôÇÔ∏èÔ∏è –ü—Ä–æ–¥–∞–π—Ç–µ –æ–¥–Ω–æ–≥–æ –∑ —ñ—Å–Ω—É—é—á–∏—Ö, —â–æ–± –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ.'
            await callback.answer(t, show_alert=True)
            return
        # —Å–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–≥—Ä–æ–∫–∞
        char.characters_user_id = buyer_id

        # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å–∞—Ç—å –∏ –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏
        buyer.money -= transfer.price
        session.add(buyer)
        if seller:
            seller.money += transfer.price
            session.add(seller)

        # —É–¥–∞–ª–∏—Ç—å —Å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        await session.delete(transfer)
        await session.commit()
    await UserService.assign_main_character_if_none(buyer_id)
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=SUCCESS_BUY_PLAYER, caption=f"‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ –≥—Ä–∞–≤—Ü—è {char.name} –∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!"
        )
    )
    await callback.bot.send_message(
        chat_id=seller_id,
        text=f"–í—ñ—Ç–∞—î–º–æ! üéâ\nüí∞ –í–∞—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è <b>{char.name}</b> –∫—É–ø–∏–ª–∏ –∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!\n\n"
             f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ <b>{transfer.price}</b> –º–æ–Ω–µ—Ç."
    )


# === –•—ç–Ω–¥–ª–µ—Ä: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ===
@transfer_transfer_router.callback_query(F.data == 'exhibited_character')
async def list_my_players(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    async for session in get_session():
        chars = await session.execute(
            select(Character)
            .where(Character.characters_user_id == user_id)
        )
        chars = chars.scalars().all()

        if not chars:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤, —è–∫–∏—Ö –º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞—Ç–∏.", show_alert=True)
            return

        kb = InlineKeyboardBuilder()
        for char in chars:
            kb.button(
                text=f"‚öΩ {char.name}",
                callback_data=f"show_char:{char.id}"
            )
        kb.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")
        )
        kb.adjust(1)
        await query.message.edit_media(
            media=InputMediaPhoto(
                media=MY_TRANSFERS,
                caption="üìã –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞–≤—Ü—è –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:"
            ),
            reply_markup=kb.as_markup()
        )


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ—É –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ ===
@transfer_transfer_router.callback_query(F.data.startswith("show_char:"))
async def show_character(callback: types.CallbackQuery):
    char_id = int(callback.data.split(":")[1])

    async for session in get_session():
        char = await session.get(Character, char_id)
        if not char:
            await callback.answer("‚ùå –ì—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        min_price = int(char.character_price * 0.8)
        fact_price = char.character_price

        text = (
            f"üèü {char.name}\n"
            f"üí™ –°–∏–ª–∞: {char.power}\n"
            f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
            f"üìÖ –í—ñ–∫: {char.age}\n"
            f"üí∞ –§–∞–∫—Ç–∏—á–Ω–∞ —Ü—ñ–Ω–∞: {fact_price}\n"
            f"ü™ô –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {min_price}"
        )

        kb = InlineKeyboardBuilder()
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä => –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–Ω—è—Ç–∏"
        if char.transfer:
            kb.button(
                text="‚ùå –ó–Ω—è—Ç–∏ –∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É",
                callback_data=f"remove_transfer:{char.transfer.id}"
            )
        else:
            # –∏–Ω–∞—á–µ ‚Äî "–í–∏—Å—Ç–∞–≤–∏—Ç–∏"
            kb.button(
                text="üì§ –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä",
                callback_data=f"sell:{char.id}"
            )

        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="exhibited_character")
        kb.adjust(1, 1)

        await callback.message.edit_media(
            media=InputMediaPhoto(media=MY_TRANSFERS, caption=text),
            reply_markup=kb.as_markup()
        )


# === FSM –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ===
class SellPlayerFSM(StatesGroup):
    waiting_for_price = State()
    selected_char_id = State()


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä" ===
@transfer_transfer_router.callback_query(F.data.startswith("sell:"))
async def sell_player(callback: types.CallbackQuery, state: FSMContext):
    char_id = int(callback.data.split(":")[1])

    async for session in get_session():
        char = await session.get(Character, char_id)
        if not char:
            await callback.answer("‚ùå –ì—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        min_price = int(char.character_price * 0.8)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state id –∏–≥—Ä–æ–∫–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        await state.update_data(char_id=char_id, min_price=min_price)

        await state.set_state(SellPlayerFSM.waiting_for_price)

        await callback.message.answer(
            f"üí° –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –≥—Ä–∞–≤—Ü—è *{char.name}*\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ü—ñ–Ω–∞: {min_price} –º–æ–Ω–µ—Ç",
            parse_mode="Markdown"
        )


# === –•—ç–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ —Ü–µ–Ω—ã ===
@transfer_transfer_router.message(SellPlayerFSM.waiting_for_price)
async def set_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    char_id = data["char_id"]
    min_price = data["min_price"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≤–∞—Ä—Ç—ñ—Å—Ç—å —É –º–æ–Ω–µ—Ç–∞—Ö).")
        return

    if price < min_price:
        await message.answer(
            f"‚ö† –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è {min_price}. "
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        return
    try:
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
        await TransferCharacterService.create(
            characters_id=char_id,
            price=price,
            transfer_type=TransferType.TRANSFER
        )
    except IntegrityError:
        await message.answer("–≥—Ä–∞–≤—Ü—è –≤–∂–µ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ")
        return

    await state.clear()

    await message.answer_photo(
        photo=SUCCESS_EXHIBITED_TRANSFER,
        caption=f"‚úÖ –ì—Ä–∞–≤—Ü—è —É—Å–ø—ñ—à–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –∑–∞ {price} –º–æ–Ω–µ—Ç!"
    )
# === –ó–Ω—è—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä ===
@transfer_transfer_router.callback_query(F.data.startswith("remove_transfer:"))
async def remove_my_transfer(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)
    user_id = callback.from_user.id

    if not transfer or transfer.character.characters_user_id != user_id:
        await callback.answer("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω—è—Ç–∏ —Ü–µ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.", show_alert=True)
        return
    await TransferCharacterService.delete(transfer.id)

    await callback.answer("‚úÖ –ì—Ä–∞–≤—Ü—è –∑–Ω—è—Ç–æ –∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É.", show_alert=True)