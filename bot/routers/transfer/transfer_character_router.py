from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from constants import TRANSFER, SUCCESS_BUY_PLAYER, SUCCESS_EXHIBITED_TRANSFER
from database.models.character import Character
from database.models.transfer_character import TransferType
from database.models.user_bot import UserBot
from database.session import get_session
from services.transfer_service import TransferCharacterService
from services.user_service import UserService

transfer_transfer_router = Router()

# === –•—ç–Ω–¥–ª–µ—Ä: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ ===
@transfer_transfer_router.message(F.text == "üìä –†–∏–Ω–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤")
async def show_transfer_market(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    await state.update_data(sort="price_asc", page=1)
    await send_transfer_page(message, state)


async def send_transfer_page(message_or_callback, state: FSMContext):
    data = await state.get_data()
    sort = data.get("sort", "price_asc")
    page = data.get("page", 1)

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã
    transfers = await TransferCharacterService.get_all()
    if not transfers:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer("‚ùå –ù–∞ —Ä–∏–Ω–∫—É –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.")
        else:
            await message_or_callback.message.edit_text("‚ùå –ù–∞ —Ä–∏–Ω–∫—É –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.")
        return

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort == "price_asc":
        transfers.sort(key=lambda t: t.price)
    elif sort == "price_desc":
        transfers.sort(key=lambda t: t.price, reverse=True)
    elif sort == "power_asc":
        transfers.sort(key=lambda t: t.character.power)
    elif sort == "power_desc":
        transfers.sort(key=lambda t: t.character.power, reverse=True)

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    per_page = 5
    start = (page - 1) * per_page
    end = start + per_page
    page_items = transfers[start:end]

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    text = f"üìä –†–∏–Ω–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page})\n–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {sort}\n\n"
    kb = InlineKeyboardBuilder()

    for transfer in page_items:
        char = transfer.character
        text += (
            f"üèü –Ü–º‚Äô—è: {char.name}\n"
            f"üìÖ –í—ñ–∫: {char.age}\n"
            f"üí™ –°–∏–ª–∞: {char.power}\n"
            f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
            f"üí∞ –¶—ñ–Ω–∞: {transfer.price}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {char.characters_user_id}\n\n"
        )
        kb.button(
            text=f"üí∞ –ö—É–ø–∏—Ç–∏ {char.name} ({transfer.price})",
            callback_data=f"buy:{transfer.id}"
        )

    # –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    kb.row(
        types.InlineKeyboardButton(text="‚¨Ü –¶—ñ–Ω–∞", callback_data="sort:price_asc"),
        types.InlineKeyboardButton(text="‚¨á –¶—ñ–Ω–∞", callback_data="sort:price_desc"),
    )
    kb.row(
        types.InlineKeyboardButton(text="‚¨Ü –°–∏–ª–∞", callback_data="sort:power_asc"),
        types.InlineKeyboardButton(text="‚¨á –°–∏–ª–∞", callback_data="sort:power_desc"),
    )

    # –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 1:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")
    if end < len(transfers):
        kb.button(text="‚û°Ô∏è –î–∞–ª—ñ", callback_data=f"page:{page+1}")

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.edit_media(
            media=InputMediaPhoto(media=TRANSFER,caption=text),
            reply_markup=kb.as_markup()
        )
    else:
        await message_or_callback.message.edit_caption(caption=text, reply_markup=kb.as_markup())


# === –•—ç–Ω–¥–ª–µ—Ä: —Å–º–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ===
@transfer_transfer_router.callback_query(F.data.startswith("sort:"))
async def change_sort(callback: types.CallbackQuery, state: FSMContext):
    sort = callback.data.split(":")[1]
    await state.update_data(sort=sort, page=1)
    await send_transfer_page(callback, state)
    await callback.answer()


# === –•—ç–Ω–¥–ª–µ—Ä: —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
@transfer_transfer_router.callback_query(F.data.startswith("page:"))
async def change_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await state.update_data(page=page)
    await send_transfer_page(callback, state)
    await callback.answer()



# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.callback_query(F.data.startswith("buy:"))
async def buy_player(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)

    if not transfer:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π –∞–±–æ –∑–Ω—è—Ç–∏–π –∑ —Ä–∏–Ω–∫—É.", show_alert=True)
        return

    char = transfer.character

    buyer_id = callback.from_user.id
    seller_id = char.characters_user_id

    # –∑–∞–ø—Ä–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if buyer_id == seller_id:
        await callback.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Å–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è.", show_alert=True)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    async for session in get_session():
        buyer = await session.get(UserBot, buyer_id)
        seller = await session.get(UserBot, seller_id)

        if buyer.money < transfer.price:
            await callback.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.", show_alert=True)
            return

        # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å–∞—Ç—å –∏ –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏
        buyer.money -= transfer.price
        seller.money += transfer.price

        # —Å–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–≥—Ä–æ–∫–∞
        char.characters_user_id = buyer_id

        # —É–¥–∞–ª–∏—Ç—å —Å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        await session.delete(transfer)
        await session.commit()
    await UserService.assign_main_character_if_none(buyer_id)
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=SUCCESS_BUY_PLAYER, caption=f"‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ –≥—Ä–∞–≤—Ü—è {char.name} –∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!"
        )
    )


# === –•—ç–Ω–¥–ª–µ—Ä: –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.message(F.text == "‚ûï –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è")
async def list_my_players(message: types.Message):
    user_id = message.from_user.id
    async for session in get_session():
        chars = await session.execute(
            select(Character).where(Character.characters_user_id == user_id)
        )
        chars = chars.scalars().all()

        if not chars:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.")
            return

        for char in chars:
            kb = InlineKeyboardBuilder()
            kb.button(
                text="üì§ –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä",
                callback_data=f"sell:{char.id}"
            )
            await message.answer(
                f"üèü {char.name} | üí™ {char.power} | üåü {char.talent} | üìÖ {char.age}\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {int(char.character_price * 0.5)}",
                reply_markup=kb.as_markup()
            )


# === FSM –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ===
class SellPlayerFSM(StatesGroup):
    waiting_for_price = State()
    selected_char_id = State()


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä" ===
@transfer_transfer_router.callback_query(F.data.startswith("sell:"))
async def sell_player(callback: types.CallbackQuery, state: FSMContext):
    char_id = int(callback.data.split(":")[1])

    async for session in get_session():
        char = await session.get(Character, char_id)
        if not char:
            await callback.answer("‚ùå –ì—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        min_price = int(char.character_price * 0.5)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state id –∏–≥—Ä–æ–∫–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        await state.update_data(char_id=char_id, min_price=min_price)

        await state.set_state(SellPlayerFSM.waiting_for_price)

        await callback.message.edit_text(
            f"üí° –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –≥—Ä–∞–≤—Ü—è *{char.name}*\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ü—ñ–Ω–∞: {min_price} –º–æ–Ω–µ—Ç",
            parse_mode="Markdown"
        )


# === –•—ç–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ —Ü–µ–Ω—ã ===
@transfer_transfer_router.message(SellPlayerFSM.waiting_for_price)
async def set_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    char_id = data["char_id"]
    min_price = data["min_price"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≤–∞—Ä—Ç—ñ—Å—Ç—å —É –º–æ–Ω–µ—Ç–∞—Ö).")
        return

    if price < min_price:
        await message.answer(
            f"‚ö† –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è {min_price}. "
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
    await TransferCharacterService.create(
        characters_id=char_id,
        price=price,
        transfer_type=TransferType.TRANSFER
    )

    await state.clear()

    await message.answer_photo(
        photo=SUCCESS_EXHIBITED_TRANSFER,
        caption=f"‚úÖ –ì—Ä–∞–≤—Ü—è —É—Å–ø—ñ—à–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –∑–∞ {price} –º–æ–Ω–µ—Ç!"
    )
