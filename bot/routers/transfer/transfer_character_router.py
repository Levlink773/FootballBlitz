from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from database.models.character import Character
from database.models.transfer_character import TransferType
from database.models.user_bot import UserBot
from database.session import get_session
from services.transfer_service import TransferCharacterService

transfer_transfer_router = Router()

# === –•—ç–Ω–¥–ª–µ—Ä: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ ===
@transfer_transfer_router.message(F.text == "üìä –†–∏–Ω–æ–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤")
async def show_transfer_market(message: types.Message):
    transfers = await TransferCharacterService.get_all()
    if not transfers:
        await message.answer("‚ùå –ù–∞ —Ä–∏–Ω–∫—É –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.")
        return

    for transfer in transfers:
        char = transfer.character
        kb = InlineKeyboardBuilder()
        kb.button(text=f"üí∞ –ö—É–ø–∏—Ç–∏ –∑–∞ {transfer.price}",
                  callback_data=f"buy:{transfer.id}")
        await message.answer(
            f"üèü –Ü–º‚Äô—è: {char.name}\n"
            f"üìÖ –í—ñ–∫: {char.age}\n"
            f"üí™ –°–∏–ª–∞: {char.power}\n"
            f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
            f"üí∞ –¶—ñ–Ω–∞: {transfer.price}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {char.characters_user_id}",
            reply_markup=kb.as_markup()
        )


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.callback_query(F.data.startswith("buy:"))
async def buy_player(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)

    if not transfer:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π –∞–±–æ –∑–Ω—è—Ç–∏–π –∑ —Ä–∏–Ω–∫—É.", show_alert=True)
        return

    char = transfer.character

    buyer_id = callback.from_user.id
    seller_id = char.characters_user_id

    # –∑–∞–ø—Ä–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if buyer_id == seller_id:
        await callback.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ —Å–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è.", show_alert=True)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    async for session in get_session():
        buyer = await session.get(UserBot, buyer_id)
        seller = await session.get(UserBot, seller_id)

        if buyer.money < transfer.price:
            await callback.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.", show_alert=True)
            return

        # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å–∞—Ç—å –∏ –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏
        buyer.money -= transfer.price
        seller.money += transfer.price

        # —Å–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–≥—Ä–æ–∫–∞
        char.characters_user_id = buyer_id

        # —É–¥–∞–ª–∏—Ç—å —Å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        await session.delete(transfer)
        await session.commit()

    await callback.message.edit_text(
        f"‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ –≥—Ä–∞–≤—Ü—è {char.name} –∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!"
    )


# === –•—ç–Ω–¥–ª–µ—Ä: –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ===
@transfer_transfer_router.message(F.text == "‚ûï –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è")
async def list_my_players(message: types.Message):
    user_id = message.from_user.id
    async for session in get_session():
        chars = await session.execute(
            select(Character).where(Character.characters_user_id == user_id)
        )
        chars = chars.scalars().all()

        if not chars:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.")
            return

        for char in chars:
            kb = InlineKeyboardBuilder()
            kb.button(
                text="üì§ –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä",
                callback_data=f"sell:{char.id}"
            )
            await message.answer(
                f"üèü {char.name} | üí™ {char.power} | üåü {char.talent} | üìÖ {char.age}\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {int(char.character_price * 0.5)}",
                reply_markup=kb.as_markup()
            )


# === FSM –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ===
class SellPlayerFSM(StatesGroup):
    waiting_for_price = State()
    selected_char_id = State()


# === –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä" ===
@transfer_transfer_router.callback_query(F.data.startswith("sell:"))
async def sell_player(callback: types.CallbackQuery, state: FSMContext):
    char_id = int(callback.data.split(":")[1])

    async for session in get_session():
        char = await session.get(Character, char_id)
        if not char:
            await callback.answer("‚ùå –ì—Ä–∞–≤—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        min_price = int(char.character_price * 0.5)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state id –∏–≥—Ä–æ–∫–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        await state.update_data(char_id=char_id, min_price=min_price)

        await state.set_state(SellPlayerFSM.waiting_for_price)

        await callback.message.edit_text(
            f"üí° –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –≥—Ä–∞–≤—Ü—è *{char.name}*\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞ —Ü—ñ–Ω–∞: {min_price} –º–æ–Ω–µ—Ç",
            parse_mode="Markdown"
        )


# === –•—ç–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ —Ü–µ–Ω—ã ===
@transfer_transfer_router.message(SellPlayerFSM.waiting_for_price)
async def set_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    char_id = data["char_id"]
    min_price = data["min_price"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á–∏—Å–ª–æ
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≤–∞—Ä—Ç—ñ—Å—Ç—å —É –º–æ–Ω–µ—Ç–∞—Ö).")
        return

    if price < min_price:
        await message.answer(
            f"‚ö† –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è {min_price}. "
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
    await TransferCharacterService.create(
        characters_id=char_id,
        price=price,
        transfer_type=TransferType.TRANSFER
    )

    await state.clear()

    await message.answer(
        f"‚úÖ –ì—Ä–∞–≤—Ü—è —É—Å–ø—ñ—à–Ω–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –∑–∞ {price} –º–æ–Ω–µ—Ç!"
    )
