from aiogram import Router, F, types
from aiogram.types import InputMediaPhoto, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from constants import FREE_AGENTS, SUCCESS_BUY_PLAYER, get_photo_character
from database.models.character import Character
from database.models.transfer_character import TransferCharacter, TransferType
from database.models.user_bot import UserBot
from database.session import get_session
from services.transfer_service import TransferCharacterService
from services.user_service import UserService

free_agents_router = Router()


# === –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤ ===
@free_agents_router.message(F.text == "üë• –í—ñ–ª—å–Ω—ñ –∞–≥–µ–Ω—Ç–∏")
async def show_free_agents(message: types.Message):
    async for session in get_session():
        result = await session.execute(
            select(TransferCharacter)
            .where(TransferCharacter.transfer_type == TransferType.FREE_AGENTS)
        )
        agents = result.scalars().all()

        if not agents:
            await message.answer("‚ö† –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–ª—å–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤.")
            return

        # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É
        text = "üåü <b>–°–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤</b>\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º‚Äô—è, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ:"
        kb = InlineKeyboardBuilder()
        for agent in agents:
            char = agent.character
            kb.row(InlineKeyboardButton(
                text=f"{char.name} | {agent.price} üí∞",
                callback_data=f"info_free:{agent.id}"
            ))
        await message.answer_photo(photo=FREE_AGENTS, caption=text, reply_markup=kb.as_markup())


# === –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –æ–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ ===
@free_agents_router.callback_query(F.data.startswith("info_free:"))
async def show_free_agent_info(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])
    transfer = await TransferCharacterService.get_by_id(transfer_id)
    if not transfer or transfer.transfer_type != TransferType.FREE_AGENTS:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", show_alert=True)
        return

    char = transfer.character
    text = (
        f"üèü <b>{char.name}</b>\n"
        f"üìÖ –í—ñ–∫: {char.age}\n"
        f"üí™ –°–∏–ª–∞: {char.power}\n"
        f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
        f"üí∞ –¶—ñ–Ω–∞: {transfer.price}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(
        text="üí∞ –ö—É–ø–∏—Ç–∏",
        callback_data=f"buy_free:{transfer.id}"
    )
    kb.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_free_list"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(media=get_photo_character(char), caption=text),
        reply_markup=kb.as_markup()
    )


# === –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É ===
@free_agents_router.callback_query(F.data == "back_free_list")
async def back_to_free_list(callback: types.CallbackQuery):
    # –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ —â–µ —Ä–∞–∑
    await show_free_agents(callback.message)
    await callback.answer()


@free_agents_router.callback_query(F.data.startswith("buy_free:"))
async def buy_free_agent(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])

    transfer = await TransferCharacterService.get_by_id(transfer_id)
    if not transfer or transfer.transfer_type != TransferType.FREE_AGENTS:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", show_alert=True)
        return

    buyer_id = callback.from_user.id
    char = transfer.character
    async for session in get_session():
        char: Character = await session.scalar(
            select(Character).where(Character.id == char.id).options(selectinload(Character.transfer))
        )
        transfer: TransferCharacter = await session.scalar(
            select(TransferCharacter).where(TransferCharacter.id == transfer.id)
        )
        buyer: UserBot = await session.scalar(
            select(UserBot).where(UserBot.user_id == buyer_id).options(
                selectinload(UserBot.characters),
                selectinload(UserBot.main_character),
            )
        )
        if not buyer:
            await callback.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É –≥—Ä—ñ.", show_alert=True)
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥
        if buyer.money < transfer.price:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç.", show_alert=True)
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        if (not buyer.vip_pass_is_active and len(buyer.characters) >= 1) or (
            buyer.vip_pass_is_active and len(buyer.characters) >= 2
        ):
            t = (
                "‚ö†Ô∏è –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤. üßç‚Äç‚ôÇÔ∏èÔ∏è "
                "–ü—Ä–æ–¥–∞–π—Ç–µ –æ–¥–Ω–æ–≥–æ –∑ —ñ—Å–Ω—É—é—á–∏—Ö, —â–æ–± –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ."
            )
            await callback.answer(t, show_alert=True)
            return

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        buyer.money -= transfer.price

        # –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        char.characters_user_id = buyer.user_id
        session.add(char)

        # —É–¥–∞–ª—è–µ–º –∏–∑ free_agents_market
        await session.delete(transfer)
        await session.commit()

    # –µ—Å–ª–∏ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ‚Üí –Ω–∞–∑–Ω–∞—á–∞–µ–º
    await UserService.assign_main_character_if_none(buyer_id)

    text = (f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏ –≥—Ä–∞–≤—Ü—è {char.name} "
            f"–∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!")
    await callback.message.edit_media(
        media=InputMediaPhoto(media=SUCCESS_BUY_PLAYER, caption=text)
    )

