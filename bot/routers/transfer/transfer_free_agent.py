from aiogram import Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from database.models.transfer_character import TransferCharacter, TransferType
from database.models.user_bot import UserBot
from database.session import get_session
from services.transfer_service import TransferCharacterService

free_agents_router = Router()


# === –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ ===
@free_agents_router.message(F.text == "üë• –í—ñ–ª—å–Ω—ñ –∞–≥–µ–Ω—Ç–∏")
async def show_free_agents(message: types.Message):
    async for session in get_session():
        result = await session.execute(
            select(TransferCharacter)
            .where(TransferCharacter.transfer_type == TransferType.FREE_AGENTS)
        )
        agents = result.scalars().all()

        if not agents:
            await message.answer("‚ö† –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–ª—å–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤.")
            return

        text = "üåü –°–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤:\n\n"
        kb = InlineKeyboardBuilder()

        for agent in agents:
            char = agent.character
            text += (
                f"üèü –Ü–º‚Äô—è: {char.name}\n"
                f"üìÖ –í—ñ–∫: {char.age}\n"
                f"üí™ –°–∏–ª–∞: {char.power}\n"
                f"üåü –¢–∞–ª–∞–Ω—Ç: {char.talent}\n"
                f"üí∞ –¶—ñ–Ω–∞: {agent.price}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
            kb.button(
                text=f"–ö—É–ø–∏—Ç–∏ {char.name} –∑–∞ {agent.price}",
                callback_data=f"buy_free:{agent.id}"
            )

        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup())


# === –ü–æ–∫—É–ø–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ ===
@free_agents_router.callback_query(F.data.startswith("buy_free:"))
async def buy_free_agent(callback: types.CallbackQuery):
    transfer_id = int(callback.data.split(":")[1])

    transfer = await TransferCharacterService.get_by_id(transfer_id)
    if not transfer or transfer.transfer_type != TransferType.FREE_AGENTS:
        await callback.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", show_alert=True)
        return

    buyer_id = callback.from_user.id

    async for session in get_session():
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        char = transfer.character
        buyer: UserBot = await session.get(type(char).owner.mapper.class_, buyer_id)  # UserBot
        if not buyer:
            await callback.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É –≥—Ä—ñ.", show_alert=True)
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥
        if buyer.money < transfer.price:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç.", show_alert=True)
            return

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        buyer.money -= transfer.price

        # –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        char.characters_user_id = buyer.user_id

        # —É–¥–∞–ª—è–µ–º –∏–∑ free_agents_market
        await session.delete(transfer)
        await session.commit()

        await callback.message.edit_text(
            f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏ –≥—Ä–∞–≤—Ü—è {char.name} "
            f"–∑–∞ {transfer.price} –º–æ–Ω–µ—Ç!"
        )
