from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile

from constants import RATING
from database.models.character import Character
from services.character_service import CharacterService

rating_router = Router()

ITEMS_PER_PAGE = 10

def get_medal_emoji(rank: int) -> str:
    return {
        1: "ü•á",
        2: "ü•à",
        3: "ü•â"
    }.get(rank, "üî∏")

def build_rating_text(characters: list[Character], page: int) -> str:
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_chars = characters[start:end]

    header = (
        "üèÜ <b>–¢–∏–∂–Ω–µ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
        "üìä –†–µ–π—Ç–∏–Ω–≥ —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ <b>Blitz-—Ç—É—Ä–Ω—ñ—Ä—ñ–≤</b>:\n"
        "ü•á 1 –º—ñ—Å—Ü–µ ‚Äî +3 –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "ü•à 2 –º—ñ—Å—Ü–µ ‚Äî +2 –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "‚öîÔ∏è –ü—ñ–≤—Ñ—ñ–Ω–∞–ª—ñ—Å—Ç–∏ ‚Äî +1 –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n\n"
        "üîÑ –©–æ–Ω–µ–¥—ñ–ª—ñ —Ä–µ–π—Ç–∏–Ω–≥ <b>–æ–±–Ω—É–ª—è—î—Ç—å—Å—è</b>, –∞ –¢–û–ü-3 –≥—Ä–∞–≤—Ü—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –Ω–∞–≥–æ—Ä–æ–¥–∏:\n"
        "ü•á 1 –º—ñ—Å—Ü–µ ‚Äî –í–µ–ª–∏–∫–∏–π –ª—É—Ç–±–æ–∫—Å üéÅ\n"
        "ü•à 2 –º—ñ—Å—Ü–µ ‚Äî –°–µ—Ä–µ–¥–Ω—ñ–π –ª—É—Ç–±–æ–∫—Å üéÅ\n"
        "ü•â 3 –º—ñ—Å—Ü–µ ‚Äî –ú–∞–ª–µ–Ω—å–∫–∏–π –ª—É—Ç–±–æ–∫—Å üéÅ\n\n"
        "–ì—Ä–∞–π –∞–∫—Ç–∏–≤–Ω–æ, —â–æ–± –ø—ñ–¥–Ω—è—Ç–∏—Å—è –≤–∏—â–µ —É —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∑–¥–æ–±—É—Ç–∏ —Ü—ñ–Ω–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏!\n\n"
        "üìå –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫:\n"
    )

    lines = []
    for i, character in enumerate(page_chars, start=start + 1):
        medal = get_medal_emoji(i)
        team_name = character.owner.team_name or "–ë–µ–∑ –∫–æ–º–∞–Ω–¥–∏"
        lines.append(f"{medal} {i}. {character.name} ({team_name}) ‚Äî {character.points} –æ—á–æ–∫")

    return header + "\n".join(lines)

def build_pagination_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"rating_page:{page-1}"))
    if page < total_pages:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"rating_page:{page+1}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

@rating_router.message(F.text.regexp(r"(‚úÖ\s*)?üìä –†–µ–π—Ç–∏–Ω–≥–∏(\s*‚úÖ)?"))
async def show_ratings(message: Message):
    characters = await CharacterService.get_all_characters()
    if not characters:
        await message.answer("–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    sorted_characters = sorted(characters, key=lambda c: c.points, reverse=True)
    total_pages = (len(sorted_characters) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    text = build_rating_text(sorted_characters, page=1)
    keyboard = build_pagination_keyboard(page=1, total_pages=total_pages)

    await message.answer_photo(photo=RATING, caption=text, reply_markup=keyboard)

@rating_router.callback_query(F.data.startswith("rating_page:"))
async def rating_pagination_handler(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    characters = await CharacterService.get_all_characters()

    if not characters:
        await callback.answer("–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.", show_alert=True)
        return

    sorted_characters = sorted(characters, key=lambda c: c.points, reverse=True)
    total_pages = (len(sorted_characters) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    if page < 1 or page > total_pages:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞.", show_alert=True)
        return

    text = build_rating_text(sorted_characters, page)
    keyboard = build_pagination_keyboard(page, total_pages)

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()
