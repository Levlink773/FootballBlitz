from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from constants import RATING
from database.models.user_bot import UserBot
from services.user_service import UserService

rating_router = Router()

ITEMS_PER_PAGE = 10

INFO_TEXT = (
    "üèÜ <b>–¢–∏–∂–Ω–µ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
    "üìä –†–µ–π—Ç–∏–Ω–≥ —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ <b>Blitz-—Ç—É—Ä–Ω—ñ—Ä—ñ–≤</b>:\n"
    "ü•á 1 –º—ñ—Å—Ü–µ ‚Äî +3 –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
    "ü•à 2 –º—ñ—Å—Ü–µ ‚Äî +2 –æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
    "‚öîÔ∏è –ü—ñ–≤—Ñ—ñ–Ω–∞–ª—ñ—Å—Ç–∏ ‚Äî +1 –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n\n"
    "üîÑ –©–æ–Ω–µ–¥—ñ–ª—ñ –æ 23:30 —Ä–µ–π—Ç–∏–Ω–≥ <b>–æ–±–Ω—É–ª—è—î—Ç—å—Å—è</b>, –∞ –ø–µ—Ä—à—ñ 10 –≥—Ä–∞–≤—Ü—ñ–≤ –æ—Ç—Ä–∏–º—É—é—Ç—å –Ω–∞–≥–æ—Ä–æ–¥–∏:\n\n"
    "üìå –¢–∞–±–ª–∏—Ü—è –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
    "ü•á 1 –º—ñ—Å—Ü–µ ‚Äî 600 üí∞, 500 ‚ö°\n"
    "ü•à 2 –º—ñ—Å—Ü–µ ‚Äî 500 üí∞, 400 ‚ö°\n"
    "ü•â 3 –º—ñ—Å—Ü–µ ‚Äî 400 üí∞, 300 ‚ö°\n"
    "4 –º—ñ—Å—Ü–µ ‚Äî 300 üí∞, 200 ‚ö°\n"
    "5 –º—ñ—Å—Ü–µ ‚Äî 200 üí∞, 100 ‚ö°\n"
    "6 –º—ñ—Å—Ü–µ ‚Äî 160 üí∞, 80 ‚ö°\n"
    "7 –º—ñ—Å—Ü–µ ‚Äî 140 üí∞, 70 ‚ö°\n"
    "8 –º—ñ—Å—Ü–µ ‚Äî 120 üí∞, 60 ‚ö°\n"
    "9 –º—ñ—Å—Ü–µ ‚Äî 100 üí∞, 50 ‚ö°\n"
    "10 –º—ñ—Å—Ü–µ ‚Äî 80 üí∞, 40 ‚ö°\n\n"
    "–ì—Ä–∞–π –∞–∫—Ç–∏–≤–Ω–æ, —â–æ–± –ø—ñ–¥–Ω—è—Ç–∏—Å—è –≤–∏—â–µ —É —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∑–¥–æ–±—É—Ç–∏ —Ü—ñ–Ω–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏!"
)

def get_medal_emoji(rank: int) -> str:
    return {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(rank, "üî∏")

def build_rating_text(users: list[UserBot], page: int) -> str:
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_chars = users[start:end]

    lines = []
    for i, user in enumerate(page_chars, start=start + 1):
        medal = get_medal_emoji(i)
        team_name = user.team_name or "–ë–µ–∑ –∫–æ–º–∞–Ω–¥–∏"
        username = f"@{user.user_name}" if user.user_name else user.user_full_name
        lines.append(f"{medal} {i}. {username} ({team_name}) ‚Äî {user.points} –æ—á–æ–∫")

    return "\n".join(lines)

def build_pagination_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    print("Total pages: ", total_pages)
    builder.row(InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rating_info"))
    if page > 1:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"rating_page:{page-1}"))
    if page < total_pages:
        builder.row(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"rating_page:{page+1}"))

    return builder.as_markup()

@rating_router.message(F.text.regexp(r"(‚úÖ\s*)?üìä –†–µ–π—Ç–∏–Ω–≥–∏(\s*‚úÖ)?"))
async def show_ratings(message: Message):
    users = await UserService.get_all_users()
    if not users:
        await message.answer("–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    sorted_users = sorted(users, key=lambda c: c.points, reverse=True)
    total_pages = (len(sorted_users) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    text = build_rating_text(sorted_users, page=1)
    keyboard = build_pagination_keyboard(page=1, total_pages=total_pages)

    await message.answer_photo(photo=RATING, caption=text, reply_markup=keyboard)

@rating_router.callback_query(F.data.startswith("rating_page:"))
async def rating_pagination_handler(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    users = await UserService.get_all_users()
    if not users:
        await callback.answer("–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.", show_alert=True)
        return

    sorted_users = sorted(users, key=lambda c: c.points, reverse=True)
    total_pages = (len(sorted_users) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    if page < 1 or page > total_pages:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞.", show_alert=True)
        return

    text = build_rating_text(sorted_users, page)
    keyboard = build_pagination_keyboard(page, total_pages)

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()

@rating_router.callback_query(F.data == "rating_info")
async def rating_info_handler(callback: CallbackQuery):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rating_page:1")]
        ]
    )
    await callback.answer()
    await callback.message.edit_caption(caption=INFO_TEXT, reply_markup=keyboard)
