from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards.utils_keyboard import menu_plosha
from database.models.character import Character
from database.models.user_bot import UserBot
from services.user_service import UserService

menu_character_router = Router()

# –ö–ª—é—á –¥–ª—è callback_data ‚Äî —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å id –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–µ
def make_character_cb(character_id: int, action: str = "view"):
    return f"character:{character_id}:{action}"

@menu_character_router.message(
    F.text.regexp(r"(‚úÖ\s*)?üèÉ‚Äç‚ôÇÔ∏è –ú–æ—è –∫–æ–º–∞–Ω–¥–∞ (\s*‚úÖ)?")
)
async def show_team(
        message: Message,
        user: UserBot,
        characters: list[Character]
):
    vip_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if user.vip_pass_is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"

    text = (
        f"üí∞ –ì—Ä–æ—à—ñ: <b>{user.money}</b>\n"
        f"‚ö° –ï–Ω–µ—Ä–≥—ñ—è: <b>{user.energy}</b> / 200\n"
        f"üéü VIP —Å—Ç–∞—Ç—É—Å: <b>{vip_status}</b>\n"
        f"üè∑ –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: <b>{user.team_name or '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</b>\n\n"
        "üìã –í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ):"
    )

    kb = InlineKeyboardBuilder()
    for c in characters:
        name_button = f"{c.name}"
        if user.main_character_id == c.id:
            name_button += " ‚úÖ (–≥–æ–ª–æ–≤–Ω–∏–π)"
        kb.add(InlineKeyboardButton(text=name_button, callback_data=make_character_cb(c.id)))
    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    msg = await message.answer("‚â°", reply_markup=menu_plosha())
    await msg.delete()

@menu_character_router.callback_query(F.data.startswith("character:"))
async def handle_character_callback(callback: CallbackQuery, user: UserBot):
    data = callback.data.split(":")
    character_id = int(data[1])
    action = data[2] if len(data) > 2 else "view"

    character = next((c for c in user.characters if c.id == character_id), None)
    if not character:
        await callback.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if action == "view":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        price = max(character.character_price, 0)
        is_main = (user.main_character_id == character.id)
        main_text = "‚úÖ –ì–æ–ª–æ–≤–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂" if is_main else "‚ùå –ù–µ –≥–æ–ª–æ–≤–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂"

        text = (
            f"–Ü–º'—è: <b>{character.name}</b>\n"
            f"–í—ñ–∫: <b>{character.age}</b>\n"
            f"–°–∏–ª–∞: <b>{character.power}</b>\n"
            f"–¢–∞–ª–∞–Ω—Ç: <b>{character.talent}</b>\n"
            f"–¶—ñ–Ω–∞: <b>{price}</b> –º–æ–Ω–µ—Ç\n"
            f"–°—Ç–∞—Ç—É—Å: {main_text}"
        )

        kb = InlineKeyboardBuilder()

        if user.vip_pass_is_active and not is_main:
            kb.add(
                InlineKeyboardButton(
                    text="üîÑ –ó—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–º",
                    callback_data=make_character_cb(character.id, "set_main")
                )
            )
        kb.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_team"))
        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        await callback.answer()
        msg = await callback.message.answer("‚â°", reply_markup=menu_plosha())
        await msg.delete()

    elif action == "set_main":
        # –ú–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if not user.vip_pass_is_active:
            await callback.answer("–¢—ñ–ª—å–∫–∏ –¥–ª—è VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!", show_alert=True)
            return
        await UserService.update_main_character(user.user_id, character_id)

        await callback.answer(f"–ì–æ–ª–æ–≤–Ω–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º —Ç–µ–ø–µ—Ä: {character.name}", show_alert=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        price = max(character.character_price, 0)
        text = (
            f"–Ü–º'—è: <b>{character.name}</b>\n"
            f"–í—ñ–∫: <b>{character.age}</b>\n"
            f"–°–∏–ª–∞: <b>{character.power}</b>\n"
            f"–¢–∞–ª–∞–Ω—Ç: <b>{character.talent}</b>\n"
            f"–¶—ñ–Ω–∞: <b>{price}</b> –º–æ–Ω–µ—Ç\n"
            f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ì–æ–ª–æ–≤–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂"
        )
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_team"))

        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        msg =  await callback.message.answer("‚â°", reply_markup=menu_plosha())
        await msg.delete()


@menu_character_router.callback_query(F.data == "back_to_team")
async def back_to_team_handler(callback: CallbackQuery, user: UserBot):
    # –í–µ—Ä–Ω–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ø–æ–≤—Ç–æ—Ä–∏–º —Ñ—É–Ω–∫—Ü–∏—é show_team)
    vip_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if user.vip_pass_is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"

    text = (
        f"üí∞ –ì—Ä–æ—à—ñ: <b>{user.money}</b>\n"
        f"‚ö° –ï–Ω–µ—Ä–≥—ñ—è: <b>{user.energy}</b> / 200\n"
        f"üéü VIP —Å—Ç–∞—Ç—É—Å: <b>{vip_status}</b>\n"
        f"üè∑ –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏: <b>{user.team_name or '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</b>\n\n"
        "üìã –í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ):"
    )

    kb = InlineKeyboardBuilder()
    for c in user.characters:
        name_button = f"{c.name}"
        if user.main_character_id == c.id:
            name_button += " ‚úÖ (–≥–æ–ª–æ–≤–Ω–∏–π)"
        kb.add(InlineKeyboardButton(text=name_button, callback_data=make_character_cb(c.id)))
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await callback.answer()
    msg = await callback.message.answer("‚â°", reply_markup=menu_plosha())
    await msg.delete()