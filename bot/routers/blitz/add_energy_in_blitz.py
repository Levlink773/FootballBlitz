import random
import time

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from blitz.blitz_match.constans import (
    MIN_DONATE_ENERGY_TO_BONUS_KOEF,
    KOEF_DONATE_ENERGY,
    DONE_ENERGY_PHOTOS
)
from blitz.blitz_match.core.manager import TeamBlitzMatchManager
from blitz.blitz_match.entities import BlitzMatchData
from bot.callbacks.blitz_callback import EpizodeDonateEnergyToBlitzMatch
from bot.filters.donate_energy_filter import CheckTimeDonateEnergyMatch
from database.models.user_bot import UserBot
from services.user_service import UserService
from utils.blitz_photo_utils import get_photo, save_photo_id
from utils.club_utils import send_message_user_team

add_energy_in_match_router = Router()

TEXT_EPIZODE_DONATE_ENERGY = """
‚ö°Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞</b>: <u>{name_team}</u> –∑—ñ–±—Ä–∞–ª–∞ <b>{min_donate_bonus_energy} –µ–Ω–µ—Ä–≥—ñ—ó</b> –≤ —Ü—å–æ–º—É –µ–ø—ñ–∑–æ–¥—ñ!  
üí™ –ó–∞–≤–¥—è–∫–∏ –∑—É—Å–∏–ª–ª—é –≥—Ä–∞–≤—Ü—è, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º—É—î <b>BOOST</b> +{koef_add_power_from_donat}% –¥–æ <b>—Å—É–º–∏ –¥–æ–Ω–∞—Ç—É</b>!

üîã <b>–ï–Ω–µ—Ä–≥—ñ—è ‚Äî —Ü–µ —Å–∏–ª–∞!</b> –ß–∏–º –±—ñ–ª—å—à–µ —ó—ó –í–∏ –≤–∫–ª–∞–¥–∞—î—Ç–µ –≤ –µ–ø—ñ–∑–æ–¥ —Ç–∏–º –±—ñ–ª—å—à–∏–π —à–∞–Ω—Å –∑–±–∏—Ç–∏ –≥–æ–ª!

üëü <b>–ì—Ä–∞—î–º–æ –¥–∞–ª—ñ</b> —Ç–∞ –π–¥–µ–º–æ –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏!
"""


class DonateEnergyInBlitzMatch(StatesGroup):
    send_count_donate_energy = State()
    send_epizode_donate_energy = State()


@add_energy_in_match_router.callback_query(
    EpizodeDonateEnergyToBlitzMatch.filter(),
)
async def donate_energy_from_blitz_match_handler(
        query: CallbackQuery,
        callback_data: EpizodeDonateEnergyToBlitzMatch,
        user: UserBot,
        state: FSMContext
):
    if int(time.time()) > callback_data.time_end_goal:
        await query.answer("–ß–∞—Å –¥–ª—è —Ü—å–æ–≥–æ –≥–æ–ª—É –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è",
                           show_alert=True)
        return await query.message.delete()

    match_data: BlitzMatchData = TeamBlitzMatchManager.get_match(callback_data.blitz_match_id)
    if not match_data:
        return

    if user.user_id not in match_data.all_user_ids_in_match:
        await query.answer("–í–∏ –Ω–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É –±–ª—ñ—Ü-–º–∞—Ç—á—ñ", show_alert=True)
        return await query.message.delete()

    await state.update_data(match_data_id=match_data.blitz_match_id)
    await state.update_data(end_time=callback_data.time_end_goal)
    await state.set_state(DonateEnergyInBlitzMatch.send_epizode_donate_energy)
    await query.message.answer(
        f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—ó –≤ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª—ñ—Ü-–º–∞—Ç—á\n1 –µ–Ω–µ—Ä–≥—ñ—è + 1 —Å–∏–ª–∞ –¥–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–∞—Ç—á—ñ\n\n–ü–æ—Ç–æ—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è —É —Ç–µ–±–µ - {user.energy} üîã")
    return None


@add_energy_in_match_router.message(
    DonateEnergyInBlitzMatch.send_epizode_donate_energy,
    (F.text.func(str.isdigit)),
    CheckTimeDonateEnergyMatch()
)
async def donate_epizode_energy(
        message: Message,
        user: UserBot,
        state: FSMContext
):
    MIN_ENERGY_DONATE_MATCH = 10
    energy = int(message.text)
    if energy < MIN_ENERGY_DONATE_MATCH:
        await state.clear()
        return await message.answer(f"–ú—ñ–Ω—ñ–º—É–º {MIN_ENERGY_DONATE_MATCH} –µ–Ω–µ—Ä–≥—ñ—ó")

    if user.energy < energy:
        await state.clear()
        return await message.answer(
            text="–£ –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó, –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é —É —Ç—É—Ä–Ω—ñ—Ä–∞—Ö —Ç–∞ —É—á–±–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ!",
        )

    data = await state.get_data()
    end_time = data.get("end_time", None)
    match_data_id = data.get("match_data_id")
    if not match_data_id or not end_time:
        await state.clear()
        return
    if int(time.time()) > end_time:
        await state.clear()
        return await message.answer(
            "–ß–∞—Å –¥–ª—è —Ü—å–æ–≥–æ –≥–æ–ª—É –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è",
        )
    match_data: BlitzMatchData = TeamBlitzMatchManager.get_match(match_data_id)

    old_chance_team = match_data.get_chance_teams()
    old_first_club_chance = old_chance_team[0] * 100
    old_second_club_chance = old_chance_team[1] * 100

    if user.user_id in match_data.first_team.users_in_match:
        match_data.first_team.episode_donate_energy += energy
        my_team = match_data.first_team

    elif user.user_id in match_data.second_team.users_match_ids:
        match_data.second_team.episode_donate_energy += energy
        my_team = match_data.second_team
    else:
        return

    if my_team.episode_donate_energy >= MIN_DONATE_ENERGY_TO_BONUS_KOEF:
        if not my_team.text_is_send_epizode_donate_energy:
            random_patch = random.choice(DONE_ENERGY_PHOTOS)
            is_save, photo = await get_photo(random_patch)

            text_epizode_donate = TEXT_EPIZODE_DONATE_ENERGY.format(
                name_team=my_team.team_name,
                min_donate_bonus_energy=MIN_DONATE_ENERGY_TO_BONUS_KOEF,
                koef_add_power_from_donat=KOEF_DONATE_ENERGY * 100
            )

            message_photo = await send_message_user_team(
                user_team=match_data.all_users,
                my_user=None,
                text=text_epizode_donate,
                photo=photo,
            )
            my_team.text_is_send_epizode_donate_energy = True
            if message_photo and not is_save:
                await save_photo_id(
                    patch_to_photo=random_patch,
                    photo_id=message_photo.photo[0].file_id,
                )

    after_chance_club = match_data.get_chance_teams()
    chance_first_team_after = after_chance_club[0] * 100
    chance_second_team_after = after_chance_club[1] * 100

    text = f"""
‚öΩÔ∏è <b>{user.main_character.name} –¥–æ–¥–∞–≤ {energy}üîã –¥–æ —Å–∏–ª –∫–æ–º–∞–Ω–¥—ñ {my_team.team_name}!</b> ‚öΩÔ∏è  

üî• <b>–ó–º—ñ–Ω–∏ —à–∞–Ω—Å—ñ–≤ –Ω–∞ –≥–æ–ª:</b>  
- ‚öΩÔ∏è –ö–æ–º–∞–Ω–¥–∞: {match_data.first_team.team_name} - <b>{old_first_club_chance:.2f}%</b> ‚Üí <b>{chance_first_team_after:.2f}%</b>  
- ‚öΩÔ∏è –ö–æ–º–∞–Ω–¥–∞: {match_data.second_team.team_name} - <b>{old_second_club_chance:.2f}%</b> ‚Üí <b>{chance_second_team_after:.2f}%</b>  

üí™ –ó–∞–≤–¥—è–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –∫–æ–º–∞–Ω–¥–∞ {my_team.team_name} –æ—Ç—Ä–∏–º–∞–ª–∞ –∑–Ω–∞—á–Ω–∏–π –ø–æ—à—Ç–æ–≤—Ö! üöÄ 
    """
    await UserService.consume_energy(user_id=user.user_id, amount_energy_consume=energy)
    await send_message_user_team(
        user_team=match_data.all_users,
        my_user=None,
        text=text
    )
