# bot/routers/blitz/blitz_menu.py
import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from blitz.services.blitz_service import BlitzService
from bot.callbacks.blitz_callback import BlitzRegisterCallback
from constants import BLITZ_SCHEDULER
from database.models.blitz import BlitzType
from database.models.user_bot import UserBot

blitz_menu_router = Router()

BLITZ_TYPE_NAMES = {
    BlitzType.VIP_BLITZ_V8: "VIP –ë–ª—ñ—Ü (8)",
    BlitzType.BLITZ_V8: "–ë–ª—ñ—Ü (8)",
    BlitzType.BLITZ_V16: "–ë–ª—ñ—Ü (16)",
    BlitzType.BLITZ_V32: "–ë–ª—ñ—Ü (32)",
    BlitzType.BLITZ_V64: "–ë–ª—ñ—Ü (64)",
}

BLITZ_LIMITS = {
    BlitzType.VIP_BLITZ_V8: 8,
    BlitzType.BLITZ_V8: 8,
    BlitzType.BLITZ_V16: 16,
    BlitzType.BLITZ_V32: 32,
    BlitzType.BLITZ_V64: 64,
}

FIXED_SCHEDULE_TEXT = """üìã <b>–†–æ–∑–∫–ª–∞–¥ –±–ª—ñ—Ü-—Ç—É—Ä–Ω—ñ—Ä—ñ–≤</b>

VIP –ë–ª—ñ—Ü (8) ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è VIP, 8 —É—á–∞—Å–Ω–∏–∫—ñ–≤  
–ë–ª—ñ—Ü (8) ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, 8 —É—á–∞—Å–Ω–∏–∫—ñ–≤  
–ë–ª—ñ—Ü (16) ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, 16 —É—á–∞—Å–Ω–∏–∫—ñ–≤  
–ë–ª—ñ—Ü (32) ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, 32 —É—á–∞—Å–Ω–∏–∫–∏  
–ë–ª—ñ—Ü (64) ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, 64 —É—á–∞—Å–Ω–∏–∫–∏

"""


def human_delta(td: datetime.timedelta) -> str:
    total_seconds = int(td.total_seconds())
    if total_seconds <= 0:
        return "—Å—Ç–∞—Ä—Ç—É–≤–∞–≤"
    minutes = total_seconds // 60
    hours = minutes // 60
    minutes %= 60
    if hours:
        return f"{hours} –≥–æ–¥ {minutes} —Ö–≤"
    return f"{minutes} —Ö–≤"


@blitz_menu_router.message(F.text.regexp(r"(‚úÖ\s*)?üèÜ –¢—É—Ä–Ω—ñ—Ä–∏(\s*‚úÖ)?"))
async def blitz_menu_handler(message: Message, user: UserBot):
    blitz_list = await BlitzService.get_all_blitz()
    if not blitz_list:
        await message.answer(FIXED_SCHEDULE_TEXT + "\nüö´ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –±–ª—ñ—Ü-—Ç—É—Ä–Ω—ñ—Ä—ñ–≤.")
        return

    now = datetime.datetime.now()
    # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π (–ø–æ start_at)
    future_blitz = sorted([b for b in blitz_list if b.start_at > now], key=lambda b: b.start_at)
    if not future_blitz:
        await message.answer(FIXED_SCHEDULE_TEXT + "\nüö´ –ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –±–ª—ñ—Ü-—Ç—É—Ä–Ω—ñ—Ä—ñ–≤.")
        return

    next_blitz = future_blitz[0]
    time_left = next_blitz.start_at - now
    minutes_left = int(time_left.total_seconds() // 60)
    is_vip_blitz = next_blitz.blitz_type == BlitzType.VIP_BLITZ_V8
    blitz_type_line = (
        f"üíé <b>VIP-–±–ª—ñ—Ü</b> ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∑ VIP-–ø–∞—Å–æ–º\n"
        if is_vip_blitz else
        f"‚ö° <b>–ó–≤–∏—á–∞–π–Ω–∏–π –±–ª—ñ—Ü</b>\n"
    )

    registration_rules = (
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –∑–∞ 30 —Ö–≤ –¥–æ —Å—Ç–∞—Ä—Ç—É." if is_vip_blitz
        else "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –∑–∞ 20 —Ö–≤ –¥–æ —Å—Ç–∞—Ä—Ç—É."
    )
    # –¢–µ–∫—Å—Ç –ø—Ä–æ –±–ª–∏–∂–∞–π—à–∏–π

    blitz_text = (
        f"\nüî• <b>–ù–∞–π–±–ª–∏–∂—á–∏–π –±–ª—ñ—Ü:</b>\n"
        f"üèÜ {BLITZ_TYPE_NAMES.get(next_blitz.blitz_type, str(next_blitz.blitz_type))}\n"
        f"üïí –°—Ç–∞—Ä—Ç: {next_blitz.start_at.strftime('%d.%m.%Y %H:%M')} ({human_delta(time_left)})\n"
        f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {next_blitz.cost} –µ–Ω–µ—Ä–≥—ñ—ó\n"
        f"üë• –£—á–∞—Å–Ω–∏–∫–∏: {len(next_blitz.users)}/{BLITZ_LIMITS[next_blitz.blitz_type]}\n\n"
        f"{blitz_type_line}"
        f"üìú {registration_rules}"
    )

    reply_markup = None
    already_registered = any(bu.user_id == user.user_id for bu in next_blitz.users)
    if not already_registered and (
            minutes_left < 2 or (minutes_left < 3 and user.vip_pass_is_active)
    ):
        if (not is_vip_blitz) or (is_vip_blitz and user.vip_pass_is_active):
            max_chars = BLITZ_LIMITS[next_blitz.blitz_type]
            cb = BlitzRegisterCallback(
                blitz_id=next_blitz.id,
                max_characters=max_chars,
                registration_cost=next_blitz.cost,
                is_scheduler=True,
            ).pack()
            button_text = f"üöÄ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å"
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=button_text, callback_data=cb)]
            ])

    await message.answer_photo(
        photo=BLITZ_SCHEDULER,
        caption=FIXED_SCHEDULE_TEXT + blitz_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
