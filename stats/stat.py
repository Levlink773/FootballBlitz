from abc import ABC, abstractmethod

from aiogram.types import Message, InputMediaPhoto

from bot.keyboards.gym_keyboard import back_to_education_task_service
from constants import EDUCATION_TASK_REWARD
from database.models.user_bot import UserBot
from services.statistics_service import StatisticsService
from services.user_service import UserService
from stats.stat_enum import StatisticsType


class BaseStatistics(ABC):
    def __init__(self, user: UserBot):
        self.user = user
    @abstractmethod
    def description(self) -> str:
        raise NotImplementedError()

    def describe(self):
        res, progress = self.statistics_result()
        if res:
            return self.describe_statistics_success()
        return self.describe_statistics(progress)

    @abstractmethod
    def describe_statistics(self, result):
        raise NotImplementedError()

    @abstractmethod
    def describe_statistics_success(self):
        raise NotImplementedError()

    @abstractmethod
    def text_get_button(self) -> str:
        raise NotImplementedError()

    @abstractmethod
    def stat_type(self) -> StatisticsType:
        raise NotImplementedError()

    @abstractmethod
    def statistics_result(self) -> tuple[bool, str]:
        raise NotImplementedError()

    @abstractmethod
    def reward_stat(self, message: Message):
        raise NotImplementedError()


class Conduct3TrainingStatistics(BaseStatistics):

    def description(self) -> str:
        return "–ü—Ä–æ–≤–µ–¥–∏ 3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî –æ—Ç—Ä–∏–º–∞–π +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def describe_statistics(self, result):
        return f"–í–∏ –≤–∂–µ –ø—Ä–æ–≤–µ–ª–∏ {result} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å! –ó–∞–ª–∏—à–∏–ª–æ—Å—å —â–µ {3 - result} –¥–æ –º–µ—Ç–∏ üéØ"

    def describe_statistics_success(self):
        text_btn = self.text_get_button()
        return f"üî• –í—ñ—Ç–∞—î–º–æ, —á–µ–º–ø—ñ–æ–Ω–µ! –í–∏ –ø—Ä–æ–≤–µ–ª–∏ 3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üí™ –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ ¬´{text_btn}¬ª —Ç–∞ –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ—é –Ω–∞–≥–æ—Ä–æ–¥—É ‚Äî +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def text_get_button(self):
        return "üéÅ –ó–∞–±—Ä–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ 3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"

    def stat_type(self) -> StatisticsType:
        return StatisticsType.CONDUCT_3_TRAINING

    def statistics_result(self) -> tuple[bool]:
        return self.user.count_go_to_gym >= 3, self.user.count_go_to_gym

    async def reward_stat(self, message: Message):
        if not any(s.stat_type == self.stat_type() for s in self.user.statistics):
            await UserService.add_energy_user(self.user.user_id, 50)
            await StatisticsService.save_statistics(self.user.user_id, self.stat_type())
            await message.edit_media(
                media=InputMediaPhoto(media=EDUCATION_TASK_REWARD, caption="üèÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –ß–∞—Å –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ —ó—ó –∑ –∫–æ—Ä–∏—Å—Ç—é üòâ"),
                reply_markup=back_to_education_task_service(),
            )
            return
        await message.answer(
            chat_id=self.user.user_id,
            text="‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è."
        )


class PlayBlitzStatistics(BaseStatistics):

    def description(self) -> str:
        return "–ó—ñ–≥—Ä–∞–π—Ç–µ —Ç—É—Ä–Ω—ñ—Ä ‚Äî –∑–∞–±–µ—Ä–∏ +20‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def describe_statistics(self, result):
        return f"–í–∏ –∑—ñ–≥—Ä–∞–ª–∏ {result} —Ç—É—Ä–Ω—ñ—Ä—ñ–≤. –©–µ —Ç—Ä—ñ—à–∫–∏ –¥–æ –ø–µ—Ä—à–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏ üèÜ"

    def describe_statistics_success(self):
        text_btn = self.text_get_button()
        return f"üéâ –ß—É–¥–æ–≤–æ! –í–∏ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ç—É—Ä–Ω—ñ—Ä—ñ ü•Ö –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ ¬´{text_btn}¬ª —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ +20‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def text_get_button(self):
        return "üéÅ –ó–∞–±—Ä–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ç—É—Ä–Ω—ñ—Ä"

    def stat_type(self) -> StatisticsType:
        return StatisticsType.PLAY_BLITZ

    def statistics_result(self) -> tuple[bool, str]:
        return self.user.count_play_blitz >= 1, self.user.count_play_blitz

    async def reward_stat(self, message: Message):
        if not any(s.stat_type == self.stat_type() for s in self.user.statistics):
            await UserService.add_energy_user(self.user.user_id, 20)
            await StatisticsService.save_statistics(self.user.user_id, self.stat_type())
            await message.edit_media(
                media=InputMediaPhoto(media=EDUCATION_TASK_REWARD, caption="üèÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +20‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –ü–æ–ø–µ—Ä–µ–¥—É —â–µ –±—ñ–ª—å—à–µ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ üí•"),
                reply_markup=back_to_education_task_service(),
            )
            return
        await message.answer(
            chat_id=self.user.user_id,
            text="‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ü–µ–π —Ç—É—Ä–Ω—ñ—Ä."
        )


class RichSemiFinalBlitzStatistics(BaseStatistics):

    def description(self) -> str:
        return "–î—ñ–π–¥–∏ –¥–æ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª—É ‚Äî –æ—Ç—Ä–∏–º–∞–π +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def describe_statistics(self, result):
        return f"–í–∏ –≤–∂–µ –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª—É {result} —Ä–∞–∑(—ñ–≤)! –©–µ —Ç—Ä—ñ—à–∫–∏ –¥–æ —Ñ—ñ–Ω–∞–ª—É üèÜ"

    def describe_statistics_success(self):
        text_btn = self.text_get_button()
        return f"üöÄ –í–∏ –ø—Ä–æ–±–∏–ª–∏—Å—å –¥–æ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª—É! –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ ¬´{text_btn}¬ª —Ç–∞ –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ—é –∑–∞—Å–ª—É–∂–µ–Ω—É –Ω–∞–≥–æ—Ä–æ–¥—É ‚Äî +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó!"

    def text_get_button(self):
        return "üéÅ –ó–∞–±—Ä–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª"

    def stat_type(self) -> StatisticsType:
        return StatisticsType.RICH_SEMI_FINAL_BLITZ

    def statistics_result(self) -> tuple[bool, str]:
        return self.user.count_rich_semi_final_blitz >= 1, self.user.count_rich_semi_final_blitz

    async def reward_stat(self, message: Message):
        if not any(s.stat_type == self.stat_type() for s in self.user.statistics):
            await UserService.add_energy_user(self.user.user_id, 50)
            await StatisticsService.save_statistics(self.user.user_id, self.stat_type())
            await message.edit_media(
                media=InputMediaPhoto(media=EDUCATION_TASK_REWARD, caption="üèÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –ù–∞—Å—Ç—É–ø–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ ‚Äî —Ñ—ñ–Ω–∞–ª üèüÔ∏è"),
                reply_markup=back_to_education_task_service()
            )
            return
        await message.answer(
            chat_id=self.user.user_id,
            text="‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª."
        )


stat = {
    StatisticsType.CONDUCT_3_TRAINING: Conduct3TrainingStatistics,
    StatisticsType.PLAY_BLITZ: PlayBlitzStatistics,
    StatisticsType.RICH_SEMI_FINAL_BLITZ: RichSemiFinalBlitzStatistics,
}

stat_done_already = {
    StatisticsType.CONDUCT_3_TRAINING: "üî• –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–µ–ª–∏ 3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –ß–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—ó –∑ –∫–æ—Ä–∏—Å—Ç—é üí™",
    StatisticsType.PLAY_BLITZ: "üéâ –í–∏ –∑—ñ–≥—Ä–∞–ª–∏ —Ç—É—Ä–Ω—ñ—Ä —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ +20‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —É —Ç–æ–º—É –∂ –¥—É—Å—ñ ‚öΩ",
    StatisticsType.RICH_SEMI_FINAL_BLITZ: "üöÄ –í–∏ –¥—ñ–π—à–ª–∏ –¥–æ –ø—ñ–≤—Ñ—ñ–Ω–∞–ª—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ +50‚ö° –µ–Ω–µ—Ä–≥—ñ—ó! –§—ñ–Ω–∞–ª —É–∂–µ –±–ª–∏–∑—å–∫–æ üèÜ",
}

