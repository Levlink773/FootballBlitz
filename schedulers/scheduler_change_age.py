from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from constants import RECORNATION
from loader import bot
from logging_config import logger
from services.character_service import CharacterService


class AgeUpdateScheduler:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()

    async def _update_age_for_all_characters(self):
        reco_characters = await CharacterService.update_age_characters()
        for character in reco_characters:
            await bot.send_photo(
                chat_id=character.characters_user_id,
                photo=RECORNATION,
                caption=f"üîÑ –í–∞—à —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç <b>{character.name}</b> –ø—Ä–æ–π—à–æ–≤ —Ä–µ–∫–æ—Ä–Ω–∞—Ü—ñ—é! üéâ\n"
                f"–¢–µ–ø–µ—Ä –π–æ–º—É –∑–Ω–æ–≤—É <b>18 —Ä–æ–∫—ñ–≤</b> üßë‚Äçüéì\n"
                f"üí™ –ù–æ–≤–∞ —Å–∏–ª–∞: <b>{character.power}</b>\n"
                f"üéØ –ù–æ–≤–∏–π —Ç–∞–ª–∞–Ω—Ç: <b>{character.talent}</b>"
            )
        logger.info("–í–æ–∑—Ä–∞—Å—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1 –≥–æ–¥.")

    async def _job_wrapper(self):
        try:
            await self._update_age_for_all_characters()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")

    async def start(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É 1-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 00:00
        self.scheduler.add_job(
            self._job_wrapper,
            CronTrigger(day=1, hour=0, minute=0)
        )
        self.scheduler.start()
        logger.info("Scheduler –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω.")
