# schedulers/scheduler_reward_rating.py
import logging

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import select, desc, update

from blitz.services.blitz_reward_service import RewardEnergyBlitzTeam, RewardMoneyBlitzTeam
from blitz.services.message_sender.blitz_sender import send_message
from database.models.character import Character
from database.models.user_bot import UserBot
from database.session import get_session

logger = logging.getLogger(__name__)


class SchedulerRewardRating:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self._job_id = "reward_rating_weekly"

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:30)."""
        self.scheduler.add_job(
            func=self._run_safe,
            trigger=CronTrigger(day_of_week="sun", hour=23, minute=30),
            id=self._job_id,
            replace_existing=True,
            misfire_grace_time=60,
        )
        self.scheduler.start()
        logger.info("SchedulerRewardRating –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:30)")

    async def _run_safe(self):
        try:
            logger.info("SchedulerRewardRating: —Å—Ç–∞—Ä—Ç –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
            await self.reward_and_reset()
            logger.info("SchedulerRewardRating: –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ SchedulerRewardRating: %s", e)

    async def reward_and_reset(self):
        """–ù–∞–≥—Ä–∞–∂–¥–∞–µ—Ç —Ç–æ–ø-3 –∏ –æ–±–Ω—É–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ–º."""
        async for session in get_session():
            # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º
            result = await session.execute(
                select(UserBot)
                .order_by(desc(UserBot.points))
                .limit(10)
            )
            top_players = result.scalars().all()

            if not top_players:
                logger.info("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è")
                return

            # –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            for idx, user in enumerate(top_players, start=1):
                rewards = []
                if idx == 1:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(600), RewardMoneyBlitzTeam(500)]
                    )
                elif idx == 2:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(500), RewardMoneyBlitzTeam(400)]
                    )
                elif idx == 3:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(400), RewardMoneyBlitzTeam(300)]
                    )
                elif idx == 4:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(300), RewardMoneyBlitzTeam(200)]
                    )
                elif idx == 5:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(200), RewardMoneyBlitzTeam(100)]
                    )
                elif idx == 6:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(160), RewardMoneyBlitzTeam(80)]
                    )
                elif idx == 7:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(140), RewardMoneyBlitzTeam(70)]
                    )
                elif idx == 8:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(120), RewardMoneyBlitzTeam(60)]
                    )
                elif idx == 9:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(100), RewardMoneyBlitzTeam(50)]
                    )
                elif idx == 10:
                    rewards.extend(
                        [RewardEnergyBlitzTeam(80), RewardMoneyBlitzTeam(40)]
                    )
                else:
                    continue
                await send_message(
                    user=user,
                    text=f"üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–æ—Å—ñ–ª–∏ <b>{idx}-–µ –º—ñ—Å—Ü–µ</b> —É —Ç–∏–∂–Ω–µ–≤–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É —ñ –æ—Ç—Ä—É–º—É—î—Ç–µ!"
                )
                for reward in rewards:
                    await reward.reward_blitz_user(user)

            # –æ–±–Ω—É–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ–º
            await session.execute(
                update(UserBot).values(points=0)
            )
            await session.commit()
            logger.info("–†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω—É–ª—ë–Ω –∏ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞–Ω—ã")
